// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: tenancies/v1/tenancies/messages.proto

package tenancies

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	assets "github.com/rkvst/go-rkvstcommon-api-gen/assets/v2/assets"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = assets.StorageIntegrity(0)
)

// define the regex for a UUID once up-front
var _messages_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on GetTenantIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTenantIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTenantIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTenantIDRequestMultiError, or nil if none found.
func (m *GetTenantIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTenantIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetIssuer()); l < 1 || l > 1024 {
		err := GetTenantIDRequestValidationError{
			field:  "Issuer",
			reason: "value length must be between 1 and 1024 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetSubject()); l < 1 || l > 1024 {
		err := GetTenantIDRequestValidationError{
			field:  "Subject",
			reason: "value length must be between 1 and 1024 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IsSocial

	// no validation rules for Email

	// no validation rules for Oid

	// no validation rules for IsNewUser

	// no validation rules for JitLoginhintTenantId

	// no validation rules for JitInvitehintTenantId

	// no validation rules for JitInvitehintRecipientEmail

	if m.GetJitInvitehintInviteId() != "" {

		if err := m._validateUuid(m.GetJitInvitehintInviteId()); err != nil {
			err = GetTenantIDRequestValidationError{
				field:  "JitInvitehintInviteId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for JitLoginhintNewTenant

	if len(errors) > 0 {
		return GetTenantIDRequestMultiError(errors)
	}

	return nil
}

func (m *GetTenantIDRequest) _validateUuid(uuid string) error {
	if matched := _messages_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetTenantIDRequestMultiError is an error wrapping multiple validation errors
// returned by GetTenantIDRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTenantIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTenantIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTenantIDRequestMultiError) AllErrors() []error { return m }

// GetTenantIDRequestValidationError is the validation error returned by
// GetTenantIDRequest.Validate if the designated constraints aren't met.
type GetTenantIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTenantIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTenantIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTenantIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTenantIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTenantIDRequestValidationError) ErrorName() string {
	return "GetTenantIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTenantIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTenantIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTenantIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTenantIDRequestValidationError{}

// Validate checks the field values on TenantIDResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TenantIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TenantIDResponseMultiError, or nil if none found.
func (m *TenantIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Identity

	// no validation rules for Tier

	// no validation rules for NewTenant

	if len(errors) > 0 {
		return TenantIDResponseMultiError(errors)
	}

	return nil
}

// TenantIDResponseMultiError is an error wrapping multiple validation errors
// returned by TenantIDResponse.ValidateAll() if the designated constraints
// aren't met.
type TenantIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantIDResponseMultiError) AllErrors() []error { return m }

// TenantIDResponseValidationError is the validation error returned by
// TenantIDResponse.Validate if the designated constraints aren't met.
type TenantIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantIDResponseValidationError) ErrorName() string { return "TenantIDResponseValidationError" }

// Error satisfies the builtin error interface
func (e TenantIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantIDResponseValidationError{}

// Validate checks the field values on CurrentTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CurrentTenantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CurrentTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CurrentTenantRequestMultiError, or nil if none found.
func (m *CurrentTenantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CurrentTenantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CurrentTenantRequestMultiError(errors)
	}

	return nil
}

// CurrentTenantRequestMultiError is an error wrapping multiple validation
// errors returned by CurrentTenantRequest.ValidateAll() if the designated
// constraints aren't met.
type CurrentTenantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CurrentTenantRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CurrentTenantRequestMultiError) AllErrors() []error { return m }

// CurrentTenantRequestValidationError is the validation error returned by
// CurrentTenantRequest.Validate if the designated constraints aren't met.
type CurrentTenantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CurrentTenantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CurrentTenantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CurrentTenantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CurrentTenantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CurrentTenantRequestValidationError) ErrorName() string {
	return "CurrentTenantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CurrentTenantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCurrentTenantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CurrentTenantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CurrentTenantRequestValidationError{}

// Validate checks the field values on GetTenantRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTenantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTenantRequestMultiError, or nil if none found.
func (m *GetTenantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTenantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	if len(errors) > 0 {
		return GetTenantRequestMultiError(errors)
	}

	return nil
}

// GetTenantRequestMultiError is an error wrapping multiple validation errors
// returned by GetTenantRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTenantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTenantRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTenantRequestMultiError) AllErrors() []error { return m }

// GetTenantRequestValidationError is the validation error returned by
// GetTenantRequest.Validate if the designated constraints aren't met.
type GetTenantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTenantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTenantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTenantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTenantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTenantRequestValidationError) ErrorName() string { return "GetTenantRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetTenantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTenantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTenantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTenantRequestValidationError{}

// Validate checks the field values on GetTenantFromWalletAddressRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetTenantFromWalletAddressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTenantFromWalletAddressRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetTenantFromWalletAddressRequestMultiError, or nil if none found.
func (m *GetTenantFromWalletAddressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTenantFromWalletAddressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WalletAddress

	if len(errors) > 0 {
		return GetTenantFromWalletAddressRequestMultiError(errors)
	}

	return nil
}

// GetTenantFromWalletAddressRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetTenantFromWalletAddressRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTenantFromWalletAddressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTenantFromWalletAddressRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTenantFromWalletAddressRequestMultiError) AllErrors() []error { return m }

// GetTenantFromWalletAddressRequestValidationError is the validation error
// returned by GetTenantFromWalletAddressRequest.Validate if the designated
// constraints aren't met.
type GetTenantFromWalletAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTenantFromWalletAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTenantFromWalletAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTenantFromWalletAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTenantFromWalletAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTenantFromWalletAddressRequestValidationError) ErrorName() string {
	return "GetTenantFromWalletAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTenantFromWalletAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTenantFromWalletAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTenantFromWalletAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTenantFromWalletAddressRequestValidationError{}

// Validate checks the field values on EnterpriseSSOConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnterpriseSSOConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnterpriseSSOConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnterpriseSSOConfigMultiError, or nil if none found.
func (m *EnterpriseSSOConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *EnterpriseSSOConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PolicyId

	if l := utf8.RuneCountInString(m.GetConfigUrl()); l < 1 || l > 1024 {
		err := EnterpriseSSOConfigValidationError{
			field:  "ConfigUrl",
			reason: "value length must be between 1 and 1024 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetIssuer()); l < 1 || l > 1024 {
		err := EnterpriseSSOConfigValidationError{
			field:  "Issuer",
			reason: "value length must be between 1 and 1024 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetClientId()); l < 1 || l > 1024 {
		err := EnterpriseSSOConfigValidationError{
			field:  "ClientId",
			reason: "value length must be between 1 and 1024 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetClientSecret()); l < 1 || l > 1024 {
		err := EnterpriseSSOConfigValidationError{
			field:  "ClientSecret",
			reason: "value length must be between 1 and 1024 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EnterpriseSSOConfigMultiError(errors)
	}

	return nil
}

// EnterpriseSSOConfigMultiError is an error wrapping multiple validation
// errors returned by EnterpriseSSOConfig.ValidateAll() if the designated
// constraints aren't met.
type EnterpriseSSOConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnterpriseSSOConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnterpriseSSOConfigMultiError) AllErrors() []error { return m }

// EnterpriseSSOConfigValidationError is the validation error returned by
// EnterpriseSSOConfig.Validate if the designated constraints aren't met.
type EnterpriseSSOConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnterpriseSSOConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnterpriseSSOConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnterpriseSSOConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnterpriseSSOConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnterpriseSSOConfigValidationError) ErrorName() string {
	return "EnterpriseSSOConfigValidationError"
}

// Error satisfies the builtin error interface
func (e EnterpriseSSOConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnterpriseSSOConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnterpriseSSOConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnterpriseSSOConfigValidationError{}

// Validate checks the field values on TenantResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TenantResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TenantResponseMultiError,
// or nil if none found.
func (m *TenantResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Identity

	if all {
		switch v := interface{}(m.GetRootPrincipal()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TenantResponseValidationError{
					field:  "RootPrincipal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TenantResponseValidationError{
					field:  "RootPrincipal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRootPrincipal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TenantResponseValidationError{
				field:  "RootPrincipal",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for WalletKeyName

	// no validation rules for WalletAddress

	for idx, item := range m.GetRootPrincipals() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TenantResponseValidationError{
						field:  fmt.Sprintf("RootPrincipals[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TenantResponseValidationError{
						field:  fmt.Sprintf("RootPrincipals[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TenantResponseValidationError{
					field:  fmt.Sprintf("RootPrincipals[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Limits

	// no validation rules for Tier

	{
		sorted_keys := make([]string, len(m.GetQuorumNetworks()))
		i := 0
		for key := range m.GetQuorumNetworks() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetQuorumNetworks()[key]
			_ = val

			// no validation rules for QuorumNetworks[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, TenantResponseValidationError{
							field:  fmt.Sprintf("QuorumNetworks[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, TenantResponseValidationError{
							field:  fmt.Sprintf("QuorumNetworks[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return TenantResponseValidationError{
						field:  fmt.Sprintf("QuorumNetworks[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for VerifiedDomain

	if utf8.RuneCountInString(m.GetDisplayName()) > 128 {
		err := TenantResponseValidationError{
			field:  "DisplayName",
			reason: "value length must be at most 128 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for LastAnchorTime

	// no validation rules for AnchorInterval

	// no validation rules for EnterpriseSsoEnabled

	if all {
		switch v := interface{}(m.GetEnterpriseSsoConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TenantResponseValidationError{
					field:  "EnterpriseSsoConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TenantResponseValidationError{
					field:  "EnterpriseSsoConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEnterpriseSsoConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TenantResponseValidationError{
				field:  "EnterpriseSsoConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TenantResponseMultiError(errors)
	}

	return nil
}

// TenantResponseMultiError is an error wrapping multiple validation errors
// returned by TenantResponse.ValidateAll() if the designated constraints
// aren't met.
type TenantResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantResponseMultiError) AllErrors() []error { return m }

// TenantResponseValidationError is the validation error returned by
// TenantResponse.Validate if the designated constraints aren't met.
type TenantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantResponseValidationError) ErrorName() string { return "TenantResponseValidationError" }

// Error satisfies the builtin error interface
func (e TenantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantResponseValidationError{}

// Validate checks the field values on SetLastAnchorTimeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetLastAnchorTimeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetLastAnchorTimeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetLastAnchorTimeRequestMultiError, or nil if none found.
func (m *SetLastAnchorTimeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetLastAnchorTimeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Identity

	// no validation rules for LastAnchorTime

	if len(errors) > 0 {
		return SetLastAnchorTimeRequestMultiError(errors)
	}

	return nil
}

// SetLastAnchorTimeRequestMultiError is an error wrapping multiple validation
// errors returned by SetLastAnchorTimeRequest.ValidateAll() if the designated
// constraints aren't met.
type SetLastAnchorTimeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetLastAnchorTimeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetLastAnchorTimeRequestMultiError) AllErrors() []error { return m }

// SetLastAnchorTimeRequestValidationError is the validation error returned by
// SetLastAnchorTimeRequest.Validate if the designated constraints aren't met.
type SetLastAnchorTimeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetLastAnchorTimeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetLastAnchorTimeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetLastAnchorTimeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetLastAnchorTimeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetLastAnchorTimeRequestValidationError) ErrorName() string {
	return "SetLastAnchorTimeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetLastAnchorTimeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetLastAnchorTimeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetLastAnchorTimeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetLastAnchorTimeRequestValidationError{}

// Validate checks the field values on SetAnchorIntervalRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetAnchorIntervalRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetAnchorIntervalRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetAnchorIntervalRequestMultiError, or nil if none found.
func (m *SetAnchorIntervalRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetAnchorIntervalRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Identity

	if val := m.GetAnchorInterval(); val < 60 || val >= 31536000 {
		err := SetAnchorIntervalRequestValidationError{
			field:  "AnchorInterval",
			reason: "value must be inside range [60, 31536000)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SetAnchorIntervalRequestMultiError(errors)
	}

	return nil
}

// SetAnchorIntervalRequestMultiError is an error wrapping multiple validation
// errors returned by SetAnchorIntervalRequest.ValidateAll() if the designated
// constraints aren't met.
type SetAnchorIntervalRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetAnchorIntervalRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetAnchorIntervalRequestMultiError) AllErrors() []error { return m }

// SetAnchorIntervalRequestValidationError is the validation error returned by
// SetAnchorIntervalRequest.Validate if the designated constraints aren't met.
type SetAnchorIntervalRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetAnchorIntervalRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetAnchorIntervalRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetAnchorIntervalRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetAnchorIntervalRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetAnchorIntervalRequestValidationError) ErrorName() string {
	return "SetAnchorIntervalRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetAnchorIntervalRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetAnchorIntervalRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetAnchorIntervalRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetAnchorIntervalRequestValidationError{}

// Validate checks the field values on GetTenantRootPrincipalsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTenantRootPrincipalsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTenantRootPrincipalsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetTenantRootPrincipalsRequestMultiError, or nil if none found.
func (m *GetTenantRootPrincipalsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTenantRootPrincipalsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetTenantRootPrincipalsRequestMultiError(errors)
	}

	return nil
}

// GetTenantRootPrincipalsRequestMultiError is an error wrapping multiple
// validation errors returned by GetTenantRootPrincipalsRequest.ValidateAll()
// if the designated constraints aren't met.
type GetTenantRootPrincipalsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTenantRootPrincipalsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTenantRootPrincipalsRequestMultiError) AllErrors() []error { return m }

// GetTenantRootPrincipalsRequestValidationError is the validation error
// returned by GetTenantRootPrincipalsRequest.Validate if the designated
// constraints aren't met.
type GetTenantRootPrincipalsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTenantRootPrincipalsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTenantRootPrincipalsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTenantRootPrincipalsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTenantRootPrincipalsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTenantRootPrincipalsRequestValidationError) ErrorName() string {
	return "GetTenantRootPrincipalsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTenantRootPrincipalsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTenantRootPrincipalsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTenantRootPrincipalsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTenantRootPrincipalsRequestValidationError{}

// Validate checks the field values on GetAdminTenantInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAdminTenantInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAdminTenantInfoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAdminTenantInfoRequestMultiError, or nil if none found.
func (m *GetAdminTenantInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAdminTenantInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAdminTenantInfoRequestMultiError(errors)
	}

	return nil
}

// GetAdminTenantInfoRequestMultiError is an error wrapping multiple validation
// errors returned by GetAdminTenantInfoRequest.ValidateAll() if the
// designated constraints aren't met.
type GetAdminTenantInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAdminTenantInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAdminTenantInfoRequestMultiError) AllErrors() []error { return m }

// GetAdminTenantInfoRequestValidationError is the validation error returned by
// GetAdminTenantInfoRequest.Validate if the designated constraints aren't met.
type GetAdminTenantInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAdminTenantInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAdminTenantInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAdminTenantInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAdminTenantInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAdminTenantInfoRequestValidationError) ErrorName() string {
	return "GetAdminTenantInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAdminTenantInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAdminTenantInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAdminTenantInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAdminTenantInfoRequestValidationError{}

// Validate checks the field values on GetPublicTenantInfoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPublicTenantInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPublicTenantInfoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPublicTenantInfoRequestMultiError, or nil if none found.
func (m *GetPublicTenantInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPublicTenantInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUuid()); err != nil {
		err = GetPublicTenantInfoRequestValidationError{
			field:  "Uuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetPublicTenantInfoRequestMultiError(errors)
	}

	return nil
}

func (m *GetPublicTenantInfoRequest) _validateUuid(uuid string) error {
	if matched := _messages_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetPublicTenantInfoRequestMultiError is an error wrapping multiple
// validation errors returned by GetPublicTenantInfoRequest.ValidateAll() if
// the designated constraints aren't met.
type GetPublicTenantInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPublicTenantInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPublicTenantInfoRequestMultiError) AllErrors() []error { return m }

// GetPublicTenantInfoRequestValidationError is the validation error returned
// by GetPublicTenantInfoRequest.Validate if the designated constraints aren't met.
type GetPublicTenantInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPublicTenantInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPublicTenantInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPublicTenantInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPublicTenantInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPublicTenantInfoRequestValidationError) ErrorName() string {
	return "GetPublicTenantInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPublicTenantInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPublicTenantInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPublicTenantInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPublicTenantInfoRequestValidationError{}

// Validate checks the field values on GetPublicTenantInfoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPublicTenantInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPublicTenantInfoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPublicTenantInfoResponseMultiError, or nil if none found.
func (m *GetPublicTenantInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPublicTenantInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Identity

	// no validation rules for VerifiedDomain

	if len(errors) > 0 {
		return GetPublicTenantInfoResponseMultiError(errors)
	}

	return nil
}

// GetPublicTenantInfoResponseMultiError is an error wrapping multiple
// validation errors returned by GetPublicTenantInfoResponse.ValidateAll() if
// the designated constraints aren't met.
type GetPublicTenantInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPublicTenantInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPublicTenantInfoResponseMultiError) AllErrors() []error { return m }

// GetPublicTenantInfoResponseValidationError is the validation error returned
// by GetPublicTenantInfoResponse.Validate if the designated constraints
// aren't met.
type GetPublicTenantInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPublicTenantInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPublicTenantInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPublicTenantInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPublicTenantInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPublicTenantInfoResponseValidationError) ErrorName() string {
	return "GetPublicTenantInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPublicTenantInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPublicTenantInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPublicTenantInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPublicTenantInfoResponseValidationError{}

// Validate checks the field values on GetTenantRootPrincipalsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTenantRootPrincipalsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTenantRootPrincipalsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetTenantRootPrincipalsResponseMultiError, or nil if none found.
func (m *GetTenantRootPrincipalsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTenantRootPrincipalsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRootPrincipals() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTenantRootPrincipalsResponseValidationError{
						field:  fmt.Sprintf("RootPrincipals[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTenantRootPrincipalsResponseValidationError{
						field:  fmt.Sprintf("RootPrincipals[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTenantRootPrincipalsResponseValidationError{
					field:  fmt.Sprintf("RootPrincipals[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetTenantRootPrincipalsResponseMultiError(errors)
	}

	return nil
}

// GetTenantRootPrincipalsResponseMultiError is an error wrapping multiple
// validation errors returned by GetTenantRootPrincipalsResponse.ValidateAll()
// if the designated constraints aren't met.
type GetTenantRootPrincipalsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTenantRootPrincipalsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTenantRootPrincipalsResponseMultiError) AllErrors() []error { return m }

// GetTenantRootPrincipalsResponseValidationError is the validation error
// returned by GetTenantRootPrincipalsResponse.Validate if the designated
// constraints aren't met.
type GetTenantRootPrincipalsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTenantRootPrincipalsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTenantRootPrincipalsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTenantRootPrincipalsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTenantRootPrincipalsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTenantRootPrincipalsResponseValidationError) ErrorName() string {
	return "GetTenantRootPrincipalsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTenantRootPrincipalsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTenantRootPrincipalsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTenantRootPrincipalsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTenantRootPrincipalsResponseValidationError{}

// Validate checks the field values on ListTenantsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTenantsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTenantsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTenantsRequestMultiError, or nil if none found.
func (m *ListTenantsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTenantsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPageSize() < 0 {
		err := ListTenantsRequestValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PageToken

	if _, ok := assets.ProofMechanism_name[int32(m.GetProofMechanism())]; !ok {
		err := ListTenantsRequestValidationError{
			field:  "ProofMechanism",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for EnterpriseSsoEnabled

	// no validation rules for VerifiedDomain

	if len(errors) > 0 {
		return ListTenantsRequestMultiError(errors)
	}

	return nil
}

// ListTenantsRequestMultiError is an error wrapping multiple validation errors
// returned by ListTenantsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListTenantsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTenantsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTenantsRequestMultiError) AllErrors() []error { return m }

// ListTenantsRequestValidationError is the validation error returned by
// ListTenantsRequest.Validate if the designated constraints aren't met.
type ListTenantsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTenantsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTenantsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTenantsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTenantsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTenantsRequestValidationError) ErrorName() string {
	return "ListTenantsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTenantsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTenantsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTenantsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTenantsRequestValidationError{}

// Validate checks the field values on ListTenantsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTenantsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTenantsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTenantsResponseMultiError, or nil if none found.
func (m *ListTenantsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTenantsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTenants() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTenantsResponseValidationError{
						field:  fmt.Sprintf("Tenants[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTenantsResponseValidationError{
						field:  fmt.Sprintf("Tenants[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTenantsResponseValidationError{
					field:  fmt.Sprintf("Tenants[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListTenantsResponseMultiError(errors)
	}

	return nil
}

// ListTenantsResponseMultiError is an error wrapping multiple validation
// errors returned by ListTenantsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListTenantsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTenantsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTenantsResponseMultiError) AllErrors() []error { return m }

// ListTenantsResponseValidationError is the validation error returned by
// ListTenantsResponse.Validate if the designated constraints aren't met.
type ListTenantsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTenantsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTenantsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTenantsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTenantsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTenantsResponseValidationError) ErrorName() string {
	return "ListTenantsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTenantsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTenantsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTenantsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTenantsResponseValidationError{}

// Validate checks the field values on UpdateTenantRootPrincipalsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateTenantRootPrincipalsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTenantRootPrincipalsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateTenantRootPrincipalsRequestMultiError, or nil if none found.
func (m *UpdateTenantRootPrincipalsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTenantRootPrincipalsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRootPrincipals() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateTenantRootPrincipalsRequestValidationError{
						field:  fmt.Sprintf("RootPrincipals[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateTenantRootPrincipalsRequestValidationError{
						field:  fmt.Sprintf("RootPrincipals[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateTenantRootPrincipalsRequestValidationError{
					field:  fmt.Sprintf("RootPrincipals[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateTenantRootPrincipalsRequestMultiError(errors)
	}

	return nil
}

// UpdateTenantRootPrincipalsRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateTenantRootPrincipalsRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateTenantRootPrincipalsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTenantRootPrincipalsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTenantRootPrincipalsRequestMultiError) AllErrors() []error { return m }

// UpdateTenantRootPrincipalsRequestValidationError is the validation error
// returned by UpdateTenantRootPrincipalsRequest.Validate if the designated
// constraints aren't met.
type UpdateTenantRootPrincipalsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTenantRootPrincipalsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTenantRootPrincipalsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTenantRootPrincipalsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTenantRootPrincipalsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTenantRootPrincipalsRequestValidationError) ErrorName() string {
	return "UpdateTenantRootPrincipalsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTenantRootPrincipalsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTenantRootPrincipalsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTenantRootPrincipalsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTenantRootPrincipalsRequestValidationError{}

// Validate checks the field values on UpdateProofMechanismRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProofMechanismRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProofMechanismRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProofMechanismRequestMultiError, or nil if none found.
func (m *UpdateProofMechanismRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProofMechanismRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Identity

	if l := len(m.GetProofMechanism()); l < 1 || l > 3 {
		err := UpdateProofMechanismRequestValidationError{
			field:  "ProofMechanism",
			reason: "value must contain between 1 and 3 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_UpdateProofMechanismRequest_ProofMechanism_Unique := make(map[assets.ProofMechanism]struct{}, len(m.GetProofMechanism()))

	for idx, item := range m.GetProofMechanism() {
		_, _ = idx, item

		if _, exists := _UpdateProofMechanismRequest_ProofMechanism_Unique[item]; exists {
			err := UpdateProofMechanismRequestValidationError{
				field:  fmt.Sprintf("ProofMechanism[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_UpdateProofMechanismRequest_ProofMechanism_Unique[item] = struct{}{}
		}

		// no validation rules for ProofMechanism[idx]
	}

	if len(errors) > 0 {
		return UpdateProofMechanismRequestMultiError(errors)
	}

	return nil
}

// UpdateProofMechanismRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateProofMechanismRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateProofMechanismRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProofMechanismRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProofMechanismRequestMultiError) AllErrors() []error { return m }

// UpdateProofMechanismRequestValidationError is the validation error returned
// by UpdateProofMechanismRequest.Validate if the designated constraints
// aren't met.
type UpdateProofMechanismRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProofMechanismRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProofMechanismRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProofMechanismRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProofMechanismRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProofMechanismRequestValidationError) ErrorName() string {
	return "UpdateProofMechanismRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProofMechanismRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProofMechanismRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProofMechanismRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProofMechanismRequestValidationError{}

// Validate checks the field values on UpdateProofMechanismResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProofMechanismResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProofMechanismResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProofMechanismResponseMultiError, or nil if none found.
func (m *UpdateProofMechanismResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProofMechanismResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateProofMechanismResponseMultiError(errors)
	}

	return nil
}

// UpdateProofMechanismResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateProofMechanismResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateProofMechanismResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProofMechanismResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProofMechanismResponseMultiError) AllErrors() []error { return m }

// UpdateProofMechanismResponseValidationError is the validation error returned
// by UpdateProofMechanismResponse.Validate if the designated constraints
// aren't met.
type UpdateProofMechanismResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProofMechanismResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProofMechanismResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProofMechanismResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProofMechanismResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProofMechanismResponseValidationError) ErrorName() string {
	return "UpdateProofMechanismResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProofMechanismResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProofMechanismResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProofMechanismResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProofMechanismResponseValidationError{}

// Validate checks the field values on GetTenantLimitsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTenantLimitsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTenantLimitsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTenantLimitsRequestMultiError, or nil if none found.
func (m *GetTenantLimitsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTenantLimitsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Identity

	if len(errors) > 0 {
		return GetTenantLimitsRequestMultiError(errors)
	}

	return nil
}

// GetTenantLimitsRequestMultiError is an error wrapping multiple validation
// errors returned by GetTenantLimitsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTenantLimitsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTenantLimitsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTenantLimitsRequestMultiError) AllErrors() []error { return m }

// GetTenantLimitsRequestValidationError is the validation error returned by
// GetTenantLimitsRequest.Validate if the designated constraints aren't met.
type GetTenantLimitsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTenantLimitsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTenantLimitsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTenantLimitsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTenantLimitsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTenantLimitsRequestValidationError) ErrorName() string {
	return "GetTenantLimitsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTenantLimitsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTenantLimitsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTenantLimitsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTenantLimitsRequestValidationError{}

// Validate checks the field values on GetLimitsForCurrentTenantRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetLimitsForCurrentTenantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLimitsForCurrentTenantRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetLimitsForCurrentTenantRequestMultiError, or nil if none found.
func (m *GetLimitsForCurrentTenantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLimitsForCurrentTenantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetLimitsForCurrentTenantRequestMultiError(errors)
	}

	return nil
}

// GetLimitsForCurrentTenantRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetLimitsForCurrentTenantRequest.ValidateAll() if the designated
// constraints aren't met.
type GetLimitsForCurrentTenantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLimitsForCurrentTenantRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLimitsForCurrentTenantRequestMultiError) AllErrors() []error { return m }

// GetLimitsForCurrentTenantRequestValidationError is the validation error
// returned by GetLimitsForCurrentTenantRequest.Validate if the designated
// constraints aren't met.
type GetLimitsForCurrentTenantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLimitsForCurrentTenantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLimitsForCurrentTenantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLimitsForCurrentTenantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLimitsForCurrentTenantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLimitsForCurrentTenantRequestValidationError) ErrorName() string {
	return "GetLimitsForCurrentTenantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLimitsForCurrentTenantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLimitsForCurrentTenantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLimitsForCurrentTenantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLimitsForCurrentTenantRequestValidationError{}

// Validate checks the field values on GetLimitsForCurrentTenantResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetLimitsForCurrentTenantResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLimitsForCurrentTenantResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetLimitsForCurrentTenantResponseMultiError, or nil if none found.
func (m *GetLimitsForCurrentTenantResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLimitsForCurrentTenantResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limits

	if len(errors) > 0 {
		return GetLimitsForCurrentTenantResponseMultiError(errors)
	}

	return nil
}

// GetLimitsForCurrentTenantResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetLimitsForCurrentTenantResponse.ValidateAll() if the designated
// constraints aren't met.
type GetLimitsForCurrentTenantResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLimitsForCurrentTenantResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLimitsForCurrentTenantResponseMultiError) AllErrors() []error { return m }

// GetLimitsForCurrentTenantResponseValidationError is the validation error
// returned by GetLimitsForCurrentTenantResponse.Validate if the designated
// constraints aren't met.
type GetLimitsForCurrentTenantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLimitsForCurrentTenantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLimitsForCurrentTenantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLimitsForCurrentTenantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLimitsForCurrentTenantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLimitsForCurrentTenantResponseValidationError) ErrorName() string {
	return "GetLimitsForCurrentTenantResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetLimitsForCurrentTenantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLimitsForCurrentTenantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLimitsForCurrentTenantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLimitsForCurrentTenantResponseValidationError{}

// Validate checks the field values on TenantLimitsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TenantLimitsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantLimitsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TenantLimitsResponseMultiError, or nil if none found.
func (m *TenantLimitsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantLimitsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Identity

	// no validation rules for Limits

	if len(errors) > 0 {
		return TenantLimitsResponseMultiError(errors)
	}

	return nil
}

// TenantLimitsResponseMultiError is an error wrapping multiple validation
// errors returned by TenantLimitsResponse.ValidateAll() if the designated
// constraints aren't met.
type TenantLimitsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantLimitsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantLimitsResponseMultiError) AllErrors() []error { return m }

// TenantLimitsResponseValidationError is the validation error returned by
// TenantLimitsResponse.Validate if the designated constraints aren't met.
type TenantLimitsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantLimitsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantLimitsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantLimitsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantLimitsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantLimitsResponseValidationError) ErrorName() string {
	return "TenantLimitsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TenantLimitsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantLimitsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantLimitsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantLimitsResponseValidationError{}

// Validate checks the field values on TopicFromPubKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TopicFromPubKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TopicFromPubKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TopicFromPubKeyRequestMultiError, or nil if none found.
func (m *TopicFromPubKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TopicFromPubKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChainID

	// no validation rules for TesseraPubKey

	if len(errors) > 0 {
		return TopicFromPubKeyRequestMultiError(errors)
	}

	return nil
}

// TopicFromPubKeyRequestMultiError is an error wrapping multiple validation
// errors returned by TopicFromPubKeyRequest.ValidateAll() if the designated
// constraints aren't met.
type TopicFromPubKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TopicFromPubKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TopicFromPubKeyRequestMultiError) AllErrors() []error { return m }

// TopicFromPubKeyRequestValidationError is the validation error returned by
// TopicFromPubKeyRequest.Validate if the designated constraints aren't met.
type TopicFromPubKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TopicFromPubKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TopicFromPubKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TopicFromPubKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TopicFromPubKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TopicFromPubKeyRequestValidationError) ErrorName() string {
	return "TopicFromPubKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TopicFromPubKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTopicFromPubKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TopicFromPubKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TopicFromPubKeyRequestValidationError{}

// Validate checks the field values on TopicFromPubKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TopicFromPubKeyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TopicFromPubKeyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TopicFromPubKeyResponseMultiError, or nil if none found.
func (m *TopicFromPubKeyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TopicFromPubKeyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Topic

	if len(errors) > 0 {
		return TopicFromPubKeyResponseMultiError(errors)
	}

	return nil
}

// TopicFromPubKeyResponseMultiError is an error wrapping multiple validation
// errors returned by TopicFromPubKeyResponse.ValidateAll() if the designated
// constraints aren't met.
type TopicFromPubKeyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TopicFromPubKeyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TopicFromPubKeyResponseMultiError) AllErrors() []error { return m }

// TopicFromPubKeyResponseValidationError is the validation error returned by
// TopicFromPubKeyResponse.Validate if the designated constraints aren't met.
type TopicFromPubKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TopicFromPubKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TopicFromPubKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TopicFromPubKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TopicFromPubKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TopicFromPubKeyResponseValidationError) ErrorName() string {
	return "TopicFromPubKeyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TopicFromPubKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTopicFromPubKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TopicFromPubKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TopicFromPubKeyResponseValidationError{}

// Validate checks the field values on AdminTenantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminTenantResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminTenantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminTenantResponseMultiError, or nil if none found.
func (m *AdminTenantResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminTenantResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Identity

	// no validation rules for VerifiedDomain

	if utf8.RuneCountInString(m.GetDisplayName()) > 128 {
		err := AdminTenantResponseValidationError{
			field:  "DisplayName",
			reason: "value length must be at most 128 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for EnterpriseSsoEnabled

	if all {
		switch v := interface{}(m.GetEnterpriseSsoConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminTenantResponseValidationError{
					field:  "EnterpriseSsoConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminTenantResponseValidationError{
					field:  "EnterpriseSsoConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEnterpriseSsoConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminTenantResponseValidationError{
				field:  "EnterpriseSsoConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdminTenantResponseMultiError(errors)
	}

	return nil
}

// AdminTenantResponseMultiError is an error wrapping multiple validation
// errors returned by AdminTenantResponse.ValidateAll() if the designated
// constraints aren't met.
type AdminTenantResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminTenantResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminTenantResponseMultiError) AllErrors() []error { return m }

// AdminTenantResponseValidationError is the validation error returned by
// AdminTenantResponse.Validate if the designated constraints aren't met.
type AdminTenantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminTenantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminTenantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminTenantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminTenantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminTenantResponseValidationError) ErrorName() string {
	return "AdminTenantResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AdminTenantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminTenantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminTenantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminTenantResponseValidationError{}

// Validate checks the field values on UpdatableTenantPayload with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatableTenantPayload) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatableTenantPayload with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatableTenantPayloadMultiError, or nil if none found.
func (m *UpdatableTenantPayload) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatableTenantPayload) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDisplayName()) > 128 {
		err := UpdatableTenantPayloadValidationError{
			field:  "DisplayName",
			reason: "value length must be at most 128 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetEnterpriseSsoConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatableTenantPayloadValidationError{
					field:  "EnterpriseSsoConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatableTenantPayloadValidationError{
					field:  "EnterpriseSsoConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEnterpriseSsoConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatableTenantPayloadValidationError{
				field:  "EnterpriseSsoConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatableTenantPayloadMultiError(errors)
	}

	return nil
}

// UpdatableTenantPayloadMultiError is an error wrapping multiple validation
// errors returned by UpdatableTenantPayload.ValidateAll() if the designated
// constraints aren't met.
type UpdatableTenantPayloadMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatableTenantPayloadMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatableTenantPayloadMultiError) AllErrors() []error { return m }

// UpdatableTenantPayloadValidationError is the validation error returned by
// UpdatableTenantPayload.Validate if the designated constraints aren't met.
type UpdatableTenantPayloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatableTenantPayloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatableTenantPayloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatableTenantPayloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatableTenantPayloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatableTenantPayloadValidationError) ErrorName() string {
	return "UpdatableTenantPayloadValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatableTenantPayloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatableTenantPayload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatableTenantPayloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatableTenantPayloadValidationError{}

// Validate checks the field values on UpdateTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTenantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTenantRequestMultiError, or nil if none found.
func (m *UpdateTenantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTenantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTenant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTenantRequestValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTenantRequestValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTenant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTenantRequestValidationError{
				field:  "Tenant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTenantRequestValidationError{
					field:  "Mask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTenantRequestValidationError{
					field:  "Mask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTenantRequestValidationError{
				field:  "Mask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateTenantRequestMultiError(errors)
	}

	return nil
}

// UpdateTenantRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateTenantRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateTenantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTenantRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTenantRequestMultiError) AllErrors() []error { return m }

// UpdateTenantRequestValidationError is the validation error returned by
// UpdateTenantRequest.Validate if the designated constraints aren't met.
type UpdateTenantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTenantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTenantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTenantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTenantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTenantRequestValidationError) ErrorName() string {
	return "UpdateTenantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTenantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTenantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTenantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTenantRequestValidationError{}

// Validate checks the field values on UpdateTenantConfigurationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateTenantConfigurationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTenantConfigurationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateTenantConfigurationRequestMultiError, or nil if none found.
func (m *UpdateTenantConfigurationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTenantConfigurationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	if all {
		switch v := interface{}(m.GetConfiguration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTenantConfigurationRequestValidationError{
					field:  "Configuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTenantConfigurationRequestValidationError{
					field:  "Configuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfiguration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTenantConfigurationRequestValidationError{
				field:  "Configuration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTenantConfigurationRequestValidationError{
					field:  "Mask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTenantConfigurationRequestValidationError{
					field:  "Mask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTenantConfigurationRequestValidationError{
				field:  "Mask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateTenantConfigurationRequestMultiError(errors)
	}

	return nil
}

// UpdateTenantConfigurationRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateTenantConfigurationRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateTenantConfigurationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTenantConfigurationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTenantConfigurationRequestMultiError) AllErrors() []error { return m }

// UpdateTenantConfigurationRequestValidationError is the validation error
// returned by UpdateTenantConfigurationRequest.Validate if the designated
// constraints aren't met.
type UpdateTenantConfigurationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTenantConfigurationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTenantConfigurationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTenantConfigurationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTenantConfigurationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTenantConfigurationRequestValidationError) ErrorName() string {
	return "UpdateTenantConfigurationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTenantConfigurationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTenantConfigurationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTenantConfigurationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTenantConfigurationRequestValidationError{}
