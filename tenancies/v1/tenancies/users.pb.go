// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.3
// source: tenancies/v1/tenancies/users.proto

package tenancies

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListUserTenantsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListUserTenantsRequest) Reset() {
	*x = ListUserTenantsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tenancies_v1_tenancies_users_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserTenantsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserTenantsRequest) ProtoMessage() {}

func (x *ListUserTenantsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tenancies_v1_tenancies_users_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserTenantsRequest.ProtoReflect.Descriptor instead.
func (*ListUserTenantsRequest) Descriptor() ([]byte, []int) {
	return file_tenancies_v1_tenancies_users_proto_rawDescGZIP(), []int{0}
}

// UserTenantResponse represent a specific tenant's information for a user
type UserTenantResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identity    string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (x *UserTenantResponse) Reset() {
	*x = UserTenantResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tenancies_v1_tenancies_users_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTenantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTenantResponse) ProtoMessage() {}

func (x *UserTenantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tenancies_v1_tenancies_users_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTenantResponse.ProtoReflect.Descriptor instead.
func (*UserTenantResponse) Descriptor() ([]byte, []int) {
	return file_tenancies_v1_tenancies_users_proto_rawDescGZIP(), []int{1}
}

func (x *UserTenantResponse) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *UserTenantResponse) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

type ListUserTenantsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenants []*UserTenantResponse `protobuf:"bytes,1,rep,name=tenants,proto3" json:"tenants,omitempty"`
	// Token to retrieve the next page of results or empty if there are none.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListUserTenantsResponse) Reset() {
	*x = ListUserTenantsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tenancies_v1_tenancies_users_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserTenantsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserTenantsResponse) ProtoMessage() {}

func (x *ListUserTenantsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tenancies_v1_tenancies_users_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserTenantsResponse.ProtoReflect.Descriptor instead.
func (*ListUserTenantsResponse) Descriptor() ([]byte, []int) {
	return file_tenancies_v1_tenancies_users_proto_rawDescGZIP(), []int{2}
}

func (x *ListUserTenantsResponse) GetTenants() []*UserTenantResponse {
	if x != nil {
		return x.Tenants
	}
	return nil
}

func (x *ListUserTenantsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

var File_tenancies_v1_tenancies_users_proto protoreflect.FileDescriptor

var file_tenancies_v1_tenancies_users_proto_rawDesc = []byte{
	0x0a, 0x22, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x69, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x18, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xbd, 0x02, 0x0a, 0x12, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x51, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x35, 0x92, 0x41, 0x32, 0x32, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x60, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x2f, 0x7b, 0x55, 0x55, 0x49, 0x44, 0x7d, 0x60, 0x40, 0x01, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x47, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41, 0x21, 0x32,
	0x1d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x79, 0x2e, 0x60, 0x40, 0x01,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x8a, 0x01,
	0x92, 0x41, 0x86, 0x01, 0x0a, 0x20, 0x32, 0x1e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x20, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61,
	0x20, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x32, 0x62, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x22, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x3a, 0x20, 0x22, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x2f, 0x30, 0x31, 0x30, 0x33, 0x38, 0x36, 0x36, 0x33, 0x2d, 0x63, 0x33, 0x35, 0x37, 0x2d, 0x34,
	0x37, 0x30, 0x64, 0x2d, 0x39, 0x31, 0x32, 0x61, 0x2d, 0x33, 0x61, 0x62, 0x63, 0x39, 0x35, 0x32,
	0x38, 0x64, 0x64, 0x32, 0x31, 0x22, 0x2c, 0x20, 0x20, 0x20, 0x20, 0x22, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x42, 0x6f, 0x62, 0x73,
	0x20, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x79, 0x22, 0x7d, 0x22, 0xd1, 0x04, 0x0a, 0x17, 0x4c,
	0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x07, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x69, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x32, 0x23,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66,
	0x6f, 0x72, 0x6d, 0x20, 0x60, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2f, 0x7b, 0x55, 0x55, 0x49,
	0x44, 0x7d, 0x60, 0x40, 0x01, 0x52, 0x07, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0xa5, 0x03, 0x92, 0x41, 0xa1, 0x03, 0x0a, 0x58, 0x32,
	0x56, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x62, 0x65, 0x6c, 0x6f,
	0x6e, 0x67, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x28, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e,
	0x65, 0x78, 0x74, 0x20, 0x70, 0x61, 0x67, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x69, 0x6e, 0x67, 0x20, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x29, 0x32, 0xc4, 0x02, 0x7b, 0x20, 0x20, 0x22, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x73, 0x22, 0x3a, 0x20, 0x5b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x22, 0x3a, 0x20, 0x22, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2f, 0x30, 0x31,
	0x30, 0x33, 0x38, 0x36, 0x36, 0x33, 0x2d, 0x63, 0x33, 0x35, 0x37, 0x2d, 0x34, 0x37, 0x30, 0x64,
	0x2d, 0x39, 0x31, 0x32, 0x61, 0x2d, 0x33, 0x61, 0x62, 0x63, 0x39, 0x35, 0x32, 0x38, 0x64, 0x64,
	0x32, 0x31, 0x22, 0x2c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x42,
	0x6f, 0x62, 0x73, 0x20, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x79, 0x22, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x7d, 0x2c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x3a,
	0x20, 0x22, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2f, 0x31, 0x32, 0x31, 0x34, 0x39, 0x35, 0x35,
	0x32, 0x2d, 0x66, 0x32, 0x35, 0x38, 0x2d, 0x34, 0x33, 0x30, 0x64, 0x2d, 0x39, 0x32, 0x32, 0x62,
	0x2d, 0x34, 0x62, 0x63, 0x64, 0x38, 0x34, 0x31, 0x33, 0x65, 0x65, 0x33, 0x30, 0x22, 0x2c, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x41, 0x6c, 0x69, 0x63, 0x65, 0x73,
	0x20, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x79, 0x22, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d,
	0x20, 0x20, 0x5d, 0x2c, 0x20, 0x20, 0x22, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x3a, 0x20, 0x22, 0x65, 0x79, 0x4a, 0x68, 0x62, 0x47, 0x63, 0x69, 0x4f, 0x69, 0x4a,
	0x53, 0x55, 0x7a, 0x49, 0x31, 0x4e, 0x69, 0x49, 0x73, 0x49, 0x6d, 0x74, 0x70, 0x5a, 0x43, 0x49,
	0x36, 0x49, 0x6e, 0x4e, 0x30, 0x64, 0x57, 0x35, 0x30, 0x61, 0x57, 0x52, 0x22, 0x7d, 0x32, 0x9a,
	0x04, 0x0a, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x90, 0x04, 0x0a, 0x0f, 0x4c, 0x69, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x2e, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x69, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x69, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xaf, 0x03, 0x92, 0x41, 0x88, 0x03,
	0x12, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x55, 0x73, 0x65, 0x72, 0x20, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x73, 0x1a, 0x33, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x61, 0x20, 0x6c,
	0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x68, 0x61, 0x73, 0x20, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x2e, 0x4a, 0x33, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12,
	0x2c, 0x0a, 0x2a, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20,
	0x62, 0x61, 0x64, 0x6c, 0x79, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x4a, 0x43, 0x0a,
	0x03, 0x34, 0x30, 0x31, 0x12, 0x3c, 0x0a, 0x3a, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64,
	0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69,
	0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x4a, 0x43, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x3c, 0x0a, 0x3a, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x61, 0x64, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x4a, 0x37, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x30,
	0x0a, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x20, 0x64, 0x6f, 0x6e, 0x27, 0x74, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x2e,
	0x4a, 0x46, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x3f, 0x0a, 0x3d, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x20,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x61,
	0x6e, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b,
	0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x69, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x42, 0x8c, 0x03, 0x92, 0x41,
	0xbe, 0x02, 0x12, 0x59, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x20, 0x41, 0x50, 0x49, 0x12, 0x1e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x20, 0x41, 0x50, 0x49, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x55, 0x73, 0x65, 0x72, 0x20, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x1e, 0x0a, 0x05, 0x52, 0x4b, 0x56, 0x53,
	0x54, 0x12, 0x15, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x72,
	0x6b, 0x76, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x22, 0x05, 0x2f,
	0x5f, 0x61, 0x70, 0x69, 0x2a, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x6a, 0x2b, 0x0a, 0x05, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x12, 0x22, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x52, 0x4b, 0x56, 0x53, 0x54,
	0x20, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x79, 0x6a, 0x26, 0x0a, 0x09, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x19, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x20, 0x79, 0x6f,
	0x75, 0x72, 0x20, 0x52, 0x4b, 0x56, 0x53, 0x54, 0x20, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x79,
	0x6a, 0x5e, 0x0a, 0x0b, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12,
	0x4f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x41, 0x50, 0x49, 0x73, 0x20, 0x74,
	0x68, 0x61, 0x74, 0x20, 0x61, 0x72, 0x65, 0x20, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x20, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x20,
	0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x5a, 0x48, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x6b, 0x76,
	0x73, 0x74, 0x2f, 0x67, 0x6f, 0x2d, 0x72, 0x6b, 0x76, 0x73, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2d, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x65, 0x6e, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x3b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_tenancies_v1_tenancies_users_proto_rawDescOnce sync.Once
	file_tenancies_v1_tenancies_users_proto_rawDescData = file_tenancies_v1_tenancies_users_proto_rawDesc
)

func file_tenancies_v1_tenancies_users_proto_rawDescGZIP() []byte {
	file_tenancies_v1_tenancies_users_proto_rawDescOnce.Do(func() {
		file_tenancies_v1_tenancies_users_proto_rawDescData = protoimpl.X.CompressGZIP(file_tenancies_v1_tenancies_users_proto_rawDescData)
	})
	return file_tenancies_v1_tenancies_users_proto_rawDescData
}

var file_tenancies_v1_tenancies_users_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_tenancies_v1_tenancies_users_proto_goTypes = []interface{}{
	(*ListUserTenantsRequest)(nil),  // 0: archivist.v1.ListUserTenantsRequest
	(*UserTenantResponse)(nil),      // 1: archivist.v1.UserTenantResponse
	(*ListUserTenantsResponse)(nil), // 2: archivist.v1.ListUserTenantsResponse
}
var file_tenancies_v1_tenancies_users_proto_depIdxs = []int32{
	1, // 0: archivist.v1.ListUserTenantsResponse.tenants:type_name -> archivist.v1.UserTenantResponse
	0, // 1: archivist.v1.Users.ListUserTenants:input_type -> archivist.v1.ListUserTenantsRequest
	2, // 2: archivist.v1.Users.ListUserTenants:output_type -> archivist.v1.ListUserTenantsResponse
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_tenancies_v1_tenancies_users_proto_init() }
func file_tenancies_v1_tenancies_users_proto_init() {
	if File_tenancies_v1_tenancies_users_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tenancies_v1_tenancies_users_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserTenantsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tenancies_v1_tenancies_users_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTenantResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tenancies_v1_tenancies_users_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserTenantsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tenancies_v1_tenancies_users_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tenancies_v1_tenancies_users_proto_goTypes,
		DependencyIndexes: file_tenancies_v1_tenancies_users_proto_depIdxs,
		MessageInfos:      file_tenancies_v1_tenancies_users_proto_msgTypes,
	}.Build()
	File_tenancies_v1_tenancies_users_proto = out.File
	file_tenancies_v1_tenancies_users_proto_rawDesc = nil
	file_tenancies_v1_tenancies_users_proto_goTypes = nil
	file_tenancies_v1_tenancies_users_proto_depIdxs = nil
}
