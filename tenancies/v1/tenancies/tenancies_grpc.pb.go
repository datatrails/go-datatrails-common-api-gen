// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: tenancies/v1/tenancies/tenancies.proto

package tenancies

import (
	context "context"
	caps "github.com/rkvst/go-rkvstcommon-api-gen/caps/v1/caps"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Tenancies_GetLimitsForCurrentTenant_FullMethodName  = "/archivist.v1.Tenancies/GetLimitsForCurrentTenant"
	Tenancies_GetInviteTokenHint_FullMethodName         = "/archivist.v1.Tenancies/GetInviteTokenHint"
	Tenancies_GetNewTenantTokenHint_FullMethodName      = "/archivist.v1.Tenancies/GetNewTenantTokenHint"
	Tenancies_GetTenantRootPrincipals_FullMethodName    = "/archivist.v1.Tenancies/GetTenantRootPrincipals"
	Tenancies_GetAdminTenantInfo_FullMethodName         = "/archivist.v1.Tenancies/GetAdminTenantInfo"
	Tenancies_UpdateTenant_FullMethodName               = "/archivist.v1.Tenancies/UpdateTenant"
	Tenancies_GetTenantID_FullMethodName                = "/archivist.v1.Tenancies/GetTenantID"
	Tenancies_GetPublicTenant_FullMethodName            = "/archivist.v1.Tenancies/GetPublicTenant"
	Tenancies_GetCurrentTenant_FullMethodName           = "/archivist.v1.Tenancies/GetCurrentTenant"
	Tenancies_ListTenants_FullMethodName                = "/archivist.v1.Tenancies/ListTenants"
	Tenancies_GetTenant_FullMethodName                  = "/archivist.v1.Tenancies/GetTenant"
	Tenancies_GetTenantFromWalletAddress_FullMethodName = "/archivist.v1.Tenancies/GetTenantFromWalletAddress"
	Tenancies_GetTenantLimits_FullMethodName            = "/archivist.v1.Tenancies/GetTenantLimits"
	Tenancies_UpdateTenantRootPrincipals_FullMethodName = "/archivist.v1.Tenancies/UpdateTenantRootPrincipals"
	Tenancies_ListUsers_FullMethodName                  = "/archivist.v1.Tenancies/ListUsers"
	Tenancies_DeleteUser_FullMethodName                 = "/archivist.v1.Tenancies/DeleteUser"
	Tenancies_GetUserCaps_FullMethodName                = "/archivist.v1.Tenancies/GetUserCaps"
	Tenancies_GetPublicTenantInfo_FullMethodName        = "/archivist.v1.Tenancies/GetPublicTenantInfo"
	Tenancies_SetLastAnchorTime_FullMethodName          = "/archivist.v1.Tenancies/SetLastAnchorTime"
	Tenancies_SetAnchorInterval_FullMethodName          = "/archivist.v1.Tenancies/SetAnchorInterval"
	Tenancies_UpdateTenantConfiguration_FullMethodName  = "/archivist.v1.Tenancies/UpdateTenantConfiguration"
	Tenancies_GetTopicFromTesseraPubKey_FullMethodName  = "/archivist.v1.Tenancies/GetTopicFromTesseraPubKey"
	Tenancies_CountUsers_FullMethodName                 = "/archivist.v1.Tenancies/CountUsers"
	Tenancies_GetUserTenantIDTokenHint_FullMethodName   = "/archivist.v1.Tenancies/GetUserTenantIDTokenHint"
)

// TenanciesClient is the client API for Tenancies service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TenanciesClient interface {
	// Get the tenant caps limits for current tenant (associated with authenticated principal.)
	GetLimitsForCurrentTenant(ctx context.Context, in *GetLimitsForCurrentTenantRequest, opts ...grpc.CallOption) (*GetLimitsForCurrentTenantResponse, error)
	GetInviteTokenHint(ctx context.Context, in *InviteTokenHintRequest, opts ...grpc.CallOption) (*InviteTokenHintResponse, error)
	// get an id_token_hint to sign the user into  brand new tenancy
	// Note: this is a private api and is grpc only
	GetNewTenantTokenHint(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserTenantIDTokenHintResponse, error)
	// Get the list of tenant root user principals
	GetTenantRootPrincipals(ctx context.Context, in *GetTenantRootPrincipalsRequest, opts ...grpc.CallOption) (*GetTenantRootPrincipalsResponse, error)
	// Gets tenant information appropriate for an admin.
	GetAdminTenantInfo(ctx context.Context, in *GetAdminTenantInfoRequest, opts ...grpc.CallOption) (*AdminTenantResponse, error)
	// Update the tenant record for specified tenant. This method is private to root principals.
	UpdateTenant(ctx context.Context, in *UpdateTenantRequest, opts ...grpc.CallOption) (*AdminTenantResponse, error)
	// Get the tenant ID given IDP details. Create tenant if not exists.
	GetTenantID(ctx context.Context, in *GetTenantIDRequest, opts ...grpc.CallOption) (*TenantIDResponse, error)
	// Get the Public Tenant
	GetPublicTenant(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TenantResponse, error)
	// Get the tenant information for the authenticated user making the request
	GetCurrentTenant(ctx context.Context, in *CurrentTenantRequest, opts ...grpc.CallOption) (*TenantResponse, error)
	// List all tenanancies
	ListTenants(ctx context.Context, in *ListTenantsRequest, opts ...grpc.CallOption) (*ListTenantsResponse, error)
	// Get the tenant information for a specific tenant
	GetTenant(ctx context.Context, in *GetTenantRequest, opts ...grpc.CallOption) (*TenantResponse, error)
	// Get the tenant information for a specitic DLT wallet address.
	GetTenantFromWalletAddress(ctx context.Context, in *GetTenantFromWalletAddressRequest, opts ...grpc.CallOption) (*TenantResponse, error)
	// Get the tenant caps limits.
	GetTenantLimits(ctx context.Context, in *GetTenantLimitsRequest, opts ...grpc.CallOption) (*TenantLimitsResponse, error)
	// Update the list of tenant root user principals
	UpdateTenantRootPrincipals(ctx context.Context, in *UpdateTenantRootPrincipalsRequest, opts ...grpc.CallOption) (*GetTenantRootPrincipalsResponse, error)
	// lists Users.
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	// delete User
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*User, error)
	// Get the cap of Users allowed per tenant.
	// e.g tenant A can only have 5 users.
	GetUserCaps(ctx context.Context, in *GetCapsTenantUserRequest, opts ...grpc.CallOption) (*caps.Caps, error)
	// Get the public tenant information
	GetPublicTenantInfo(ctx context.Context, in *GetPublicTenantInfoRequest, opts ...grpc.CallOption) (*GetPublicTenantInfoResponse, error)
	// Set Time of last Anchor
	SetLastAnchorTime(ctx context.Context, in *SetLastAnchorTimeRequest, opts ...grpc.CallOption) (*TenantResponse, error)
	// Set Anchor Interval
	SetAnchorInterval(ctx context.Context, in *SetAnchorIntervalRequest, opts ...grpc.CallOption) (*TenantResponse, error)
	// Update the tenant record for specified tenant. This method is internal
	UpdateTenantConfiguration(ctx context.Context, in *UpdateTenantConfigurationRequest, opts ...grpc.CallOption) (*TenantResponse, error)
	// Get the topic corresponding to the given chainID of the quorum network and the
	//
	//	tessera public key within that network.
	GetTopicFromTesseraPubKey(ctx context.Context, in *TopicFromPubKeyRequest, opts ...grpc.CallOption) (*TopicFromPubKeyResponse, error)
	// Count Users
	CountUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CountUsersResponse, error)
	// get an id_token_hint to sign the user into their selected tenant
	// Note: this is a private api and is grpc only
	GetUserTenantIDTokenHint(ctx context.Context, in *UserTenantIDTokenHintRequest, opts ...grpc.CallOption) (*UserTenantIDTokenHintResponse, error)
}

type tenanciesClient struct {
	cc grpc.ClientConnInterface
}

func NewTenanciesClient(cc grpc.ClientConnInterface) TenanciesClient {
	return &tenanciesClient{cc}
}

func (c *tenanciesClient) GetLimitsForCurrentTenant(ctx context.Context, in *GetLimitsForCurrentTenantRequest, opts ...grpc.CallOption) (*GetLimitsForCurrentTenantResponse, error) {
	out := new(GetLimitsForCurrentTenantResponse)
	err := c.cc.Invoke(ctx, Tenancies_GetLimitsForCurrentTenant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenanciesClient) GetInviteTokenHint(ctx context.Context, in *InviteTokenHintRequest, opts ...grpc.CallOption) (*InviteTokenHintResponse, error) {
	out := new(InviteTokenHintResponse)
	err := c.cc.Invoke(ctx, Tenancies_GetInviteTokenHint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenanciesClient) GetNewTenantTokenHint(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserTenantIDTokenHintResponse, error) {
	out := new(UserTenantIDTokenHintResponse)
	err := c.cc.Invoke(ctx, Tenancies_GetNewTenantTokenHint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenanciesClient) GetTenantRootPrincipals(ctx context.Context, in *GetTenantRootPrincipalsRequest, opts ...grpc.CallOption) (*GetTenantRootPrincipalsResponse, error) {
	out := new(GetTenantRootPrincipalsResponse)
	err := c.cc.Invoke(ctx, Tenancies_GetTenantRootPrincipals_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenanciesClient) GetAdminTenantInfo(ctx context.Context, in *GetAdminTenantInfoRequest, opts ...grpc.CallOption) (*AdminTenantResponse, error) {
	out := new(AdminTenantResponse)
	err := c.cc.Invoke(ctx, Tenancies_GetAdminTenantInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenanciesClient) UpdateTenant(ctx context.Context, in *UpdateTenantRequest, opts ...grpc.CallOption) (*AdminTenantResponse, error) {
	out := new(AdminTenantResponse)
	err := c.cc.Invoke(ctx, Tenancies_UpdateTenant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenanciesClient) GetTenantID(ctx context.Context, in *GetTenantIDRequest, opts ...grpc.CallOption) (*TenantIDResponse, error) {
	out := new(TenantIDResponse)
	err := c.cc.Invoke(ctx, Tenancies_GetTenantID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenanciesClient) GetPublicTenant(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TenantResponse, error) {
	out := new(TenantResponse)
	err := c.cc.Invoke(ctx, Tenancies_GetPublicTenant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenanciesClient) GetCurrentTenant(ctx context.Context, in *CurrentTenantRequest, opts ...grpc.CallOption) (*TenantResponse, error) {
	out := new(TenantResponse)
	err := c.cc.Invoke(ctx, Tenancies_GetCurrentTenant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenanciesClient) ListTenants(ctx context.Context, in *ListTenantsRequest, opts ...grpc.CallOption) (*ListTenantsResponse, error) {
	out := new(ListTenantsResponse)
	err := c.cc.Invoke(ctx, Tenancies_ListTenants_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenanciesClient) GetTenant(ctx context.Context, in *GetTenantRequest, opts ...grpc.CallOption) (*TenantResponse, error) {
	out := new(TenantResponse)
	err := c.cc.Invoke(ctx, Tenancies_GetTenant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenanciesClient) GetTenantFromWalletAddress(ctx context.Context, in *GetTenantFromWalletAddressRequest, opts ...grpc.CallOption) (*TenantResponse, error) {
	out := new(TenantResponse)
	err := c.cc.Invoke(ctx, Tenancies_GetTenantFromWalletAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenanciesClient) GetTenantLimits(ctx context.Context, in *GetTenantLimitsRequest, opts ...grpc.CallOption) (*TenantLimitsResponse, error) {
	out := new(TenantLimitsResponse)
	err := c.cc.Invoke(ctx, Tenancies_GetTenantLimits_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenanciesClient) UpdateTenantRootPrincipals(ctx context.Context, in *UpdateTenantRootPrincipalsRequest, opts ...grpc.CallOption) (*GetTenantRootPrincipalsResponse, error) {
	out := new(GetTenantRootPrincipalsResponse)
	err := c.cc.Invoke(ctx, Tenancies_UpdateTenantRootPrincipals_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenanciesClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, Tenancies_ListUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenanciesClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, Tenancies_DeleteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenanciesClient) GetUserCaps(ctx context.Context, in *GetCapsTenantUserRequest, opts ...grpc.CallOption) (*caps.Caps, error) {
	out := new(caps.Caps)
	err := c.cc.Invoke(ctx, Tenancies_GetUserCaps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenanciesClient) GetPublicTenantInfo(ctx context.Context, in *GetPublicTenantInfoRequest, opts ...grpc.CallOption) (*GetPublicTenantInfoResponse, error) {
	out := new(GetPublicTenantInfoResponse)
	err := c.cc.Invoke(ctx, Tenancies_GetPublicTenantInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenanciesClient) SetLastAnchorTime(ctx context.Context, in *SetLastAnchorTimeRequest, opts ...grpc.CallOption) (*TenantResponse, error) {
	out := new(TenantResponse)
	err := c.cc.Invoke(ctx, Tenancies_SetLastAnchorTime_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenanciesClient) SetAnchorInterval(ctx context.Context, in *SetAnchorIntervalRequest, opts ...grpc.CallOption) (*TenantResponse, error) {
	out := new(TenantResponse)
	err := c.cc.Invoke(ctx, Tenancies_SetAnchorInterval_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenanciesClient) UpdateTenantConfiguration(ctx context.Context, in *UpdateTenantConfigurationRequest, opts ...grpc.CallOption) (*TenantResponse, error) {
	out := new(TenantResponse)
	err := c.cc.Invoke(ctx, Tenancies_UpdateTenantConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenanciesClient) GetTopicFromTesseraPubKey(ctx context.Context, in *TopicFromPubKeyRequest, opts ...grpc.CallOption) (*TopicFromPubKeyResponse, error) {
	out := new(TopicFromPubKeyResponse)
	err := c.cc.Invoke(ctx, Tenancies_GetTopicFromTesseraPubKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenanciesClient) CountUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CountUsersResponse, error) {
	out := new(CountUsersResponse)
	err := c.cc.Invoke(ctx, Tenancies_CountUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenanciesClient) GetUserTenantIDTokenHint(ctx context.Context, in *UserTenantIDTokenHintRequest, opts ...grpc.CallOption) (*UserTenantIDTokenHintResponse, error) {
	out := new(UserTenantIDTokenHintResponse)
	err := c.cc.Invoke(ctx, Tenancies_GetUserTenantIDTokenHint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TenanciesServer is the server API for Tenancies service.
// All implementations must embed UnimplementedTenanciesServer
// for forward compatibility
type TenanciesServer interface {
	// Get the tenant caps limits for current tenant (associated with authenticated principal.)
	GetLimitsForCurrentTenant(context.Context, *GetLimitsForCurrentTenantRequest) (*GetLimitsForCurrentTenantResponse, error)
	GetInviteTokenHint(context.Context, *InviteTokenHintRequest) (*InviteTokenHintResponse, error)
	// get an id_token_hint to sign the user into  brand new tenancy
	// Note: this is a private api and is grpc only
	GetNewTenantTokenHint(context.Context, *emptypb.Empty) (*UserTenantIDTokenHintResponse, error)
	// Get the list of tenant root user principals
	GetTenantRootPrincipals(context.Context, *GetTenantRootPrincipalsRequest) (*GetTenantRootPrincipalsResponse, error)
	// Gets tenant information appropriate for an admin.
	GetAdminTenantInfo(context.Context, *GetAdminTenantInfoRequest) (*AdminTenantResponse, error)
	// Update the tenant record for specified tenant. This method is private to root principals.
	UpdateTenant(context.Context, *UpdateTenantRequest) (*AdminTenantResponse, error)
	// Get the tenant ID given IDP details. Create tenant if not exists.
	GetTenantID(context.Context, *GetTenantIDRequest) (*TenantIDResponse, error)
	// Get the Public Tenant
	GetPublicTenant(context.Context, *emptypb.Empty) (*TenantResponse, error)
	// Get the tenant information for the authenticated user making the request
	GetCurrentTenant(context.Context, *CurrentTenantRequest) (*TenantResponse, error)
	// List all tenanancies
	ListTenants(context.Context, *ListTenantsRequest) (*ListTenantsResponse, error)
	// Get the tenant information for a specific tenant
	GetTenant(context.Context, *GetTenantRequest) (*TenantResponse, error)
	// Get the tenant information for a specitic DLT wallet address.
	GetTenantFromWalletAddress(context.Context, *GetTenantFromWalletAddressRequest) (*TenantResponse, error)
	// Get the tenant caps limits.
	GetTenantLimits(context.Context, *GetTenantLimitsRequest) (*TenantLimitsResponse, error)
	// Update the list of tenant root user principals
	UpdateTenantRootPrincipals(context.Context, *UpdateTenantRootPrincipalsRequest) (*GetTenantRootPrincipalsResponse, error)
	// lists Users.
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	// delete User
	DeleteUser(context.Context, *DeleteUserRequest) (*User, error)
	// Get the cap of Users allowed per tenant.
	// e.g tenant A can only have 5 users.
	GetUserCaps(context.Context, *GetCapsTenantUserRequest) (*caps.Caps, error)
	// Get the public tenant information
	GetPublicTenantInfo(context.Context, *GetPublicTenantInfoRequest) (*GetPublicTenantInfoResponse, error)
	// Set Time of last Anchor
	SetLastAnchorTime(context.Context, *SetLastAnchorTimeRequest) (*TenantResponse, error)
	// Set Anchor Interval
	SetAnchorInterval(context.Context, *SetAnchorIntervalRequest) (*TenantResponse, error)
	// Update the tenant record for specified tenant. This method is internal
	UpdateTenantConfiguration(context.Context, *UpdateTenantConfigurationRequest) (*TenantResponse, error)
	// Get the topic corresponding to the given chainID of the quorum network and the
	//
	//	tessera public key within that network.
	GetTopicFromTesseraPubKey(context.Context, *TopicFromPubKeyRequest) (*TopicFromPubKeyResponse, error)
	// Count Users
	CountUsers(context.Context, *emptypb.Empty) (*CountUsersResponse, error)
	// get an id_token_hint to sign the user into their selected tenant
	// Note: this is a private api and is grpc only
	GetUserTenantIDTokenHint(context.Context, *UserTenantIDTokenHintRequest) (*UserTenantIDTokenHintResponse, error)
	mustEmbedUnimplementedTenanciesServer()
}

// UnimplementedTenanciesServer must be embedded to have forward compatible implementations.
type UnimplementedTenanciesServer struct {
}

func (UnimplementedTenanciesServer) GetLimitsForCurrentTenant(context.Context, *GetLimitsForCurrentTenantRequest) (*GetLimitsForCurrentTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLimitsForCurrentTenant not implemented")
}
func (UnimplementedTenanciesServer) GetInviteTokenHint(context.Context, *InviteTokenHintRequest) (*InviteTokenHintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInviteTokenHint not implemented")
}
func (UnimplementedTenanciesServer) GetNewTenantTokenHint(context.Context, *emptypb.Empty) (*UserTenantIDTokenHintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewTenantTokenHint not implemented")
}
func (UnimplementedTenanciesServer) GetTenantRootPrincipals(context.Context, *GetTenantRootPrincipalsRequest) (*GetTenantRootPrincipalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenantRootPrincipals not implemented")
}
func (UnimplementedTenanciesServer) GetAdminTenantInfo(context.Context, *GetAdminTenantInfoRequest) (*AdminTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdminTenantInfo not implemented")
}
func (UnimplementedTenanciesServer) UpdateTenant(context.Context, *UpdateTenantRequest) (*AdminTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTenant not implemented")
}
func (UnimplementedTenanciesServer) GetTenantID(context.Context, *GetTenantIDRequest) (*TenantIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenantID not implemented")
}
func (UnimplementedTenanciesServer) GetPublicTenant(context.Context, *emptypb.Empty) (*TenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicTenant not implemented")
}
func (UnimplementedTenanciesServer) GetCurrentTenant(context.Context, *CurrentTenantRequest) (*TenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentTenant not implemented")
}
func (UnimplementedTenanciesServer) ListTenants(context.Context, *ListTenantsRequest) (*ListTenantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTenants not implemented")
}
func (UnimplementedTenanciesServer) GetTenant(context.Context, *GetTenantRequest) (*TenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenant not implemented")
}
func (UnimplementedTenanciesServer) GetTenantFromWalletAddress(context.Context, *GetTenantFromWalletAddressRequest) (*TenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenantFromWalletAddress not implemented")
}
func (UnimplementedTenanciesServer) GetTenantLimits(context.Context, *GetTenantLimitsRequest) (*TenantLimitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenantLimits not implemented")
}
func (UnimplementedTenanciesServer) UpdateTenantRootPrincipals(context.Context, *UpdateTenantRootPrincipalsRequest) (*GetTenantRootPrincipalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTenantRootPrincipals not implemented")
}
func (UnimplementedTenanciesServer) ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedTenanciesServer) DeleteUser(context.Context, *DeleteUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedTenanciesServer) GetUserCaps(context.Context, *GetCapsTenantUserRequest) (*caps.Caps, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCaps not implemented")
}
func (UnimplementedTenanciesServer) GetPublicTenantInfo(context.Context, *GetPublicTenantInfoRequest) (*GetPublicTenantInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicTenantInfo not implemented")
}
func (UnimplementedTenanciesServer) SetLastAnchorTime(context.Context, *SetLastAnchorTimeRequest) (*TenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLastAnchorTime not implemented")
}
func (UnimplementedTenanciesServer) SetAnchorInterval(context.Context, *SetAnchorIntervalRequest) (*TenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAnchorInterval not implemented")
}
func (UnimplementedTenanciesServer) UpdateTenantConfiguration(context.Context, *UpdateTenantConfigurationRequest) (*TenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTenantConfiguration not implemented")
}
func (UnimplementedTenanciesServer) GetTopicFromTesseraPubKey(context.Context, *TopicFromPubKeyRequest) (*TopicFromPubKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicFromTesseraPubKey not implemented")
}
func (UnimplementedTenanciesServer) CountUsers(context.Context, *emptypb.Empty) (*CountUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountUsers not implemented")
}
func (UnimplementedTenanciesServer) GetUserTenantIDTokenHint(context.Context, *UserTenantIDTokenHintRequest) (*UserTenantIDTokenHintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserTenantIDTokenHint not implemented")
}
func (UnimplementedTenanciesServer) mustEmbedUnimplementedTenanciesServer() {}

// UnsafeTenanciesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TenanciesServer will
// result in compilation errors.
type UnsafeTenanciesServer interface {
	mustEmbedUnimplementedTenanciesServer()
}

func RegisterTenanciesServer(s grpc.ServiceRegistrar, srv TenanciesServer) {
	s.RegisterService(&Tenancies_ServiceDesc, srv)
}

func _Tenancies_GetLimitsForCurrentTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLimitsForCurrentTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenanciesServer).GetLimitsForCurrentTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tenancies_GetLimitsForCurrentTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenanciesServer).GetLimitsForCurrentTenant(ctx, req.(*GetLimitsForCurrentTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenancies_GetInviteTokenHint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteTokenHintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenanciesServer).GetInviteTokenHint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tenancies_GetInviteTokenHint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenanciesServer).GetInviteTokenHint(ctx, req.(*InviteTokenHintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenancies_GetNewTenantTokenHint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenanciesServer).GetNewTenantTokenHint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tenancies_GetNewTenantTokenHint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenanciesServer).GetNewTenantTokenHint(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenancies_GetTenantRootPrincipals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTenantRootPrincipalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenanciesServer).GetTenantRootPrincipals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tenancies_GetTenantRootPrincipals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenanciesServer).GetTenantRootPrincipals(ctx, req.(*GetTenantRootPrincipalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenancies_GetAdminTenantInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdminTenantInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenanciesServer).GetAdminTenantInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tenancies_GetAdminTenantInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenanciesServer).GetAdminTenantInfo(ctx, req.(*GetAdminTenantInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenancies_UpdateTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenanciesServer).UpdateTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tenancies_UpdateTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenanciesServer).UpdateTenant(ctx, req.(*UpdateTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenancies_GetTenantID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTenantIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenanciesServer).GetTenantID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tenancies_GetTenantID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenanciesServer).GetTenantID(ctx, req.(*GetTenantIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenancies_GetPublicTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenanciesServer).GetPublicTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tenancies_GetPublicTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenanciesServer).GetPublicTenant(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenancies_GetCurrentTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrentTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenanciesServer).GetCurrentTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tenancies_GetCurrentTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenanciesServer).GetCurrentTenant(ctx, req.(*CurrentTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenancies_ListTenants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTenantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenanciesServer).ListTenants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tenancies_ListTenants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenanciesServer).ListTenants(ctx, req.(*ListTenantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenancies_GetTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenanciesServer).GetTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tenancies_GetTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenanciesServer).GetTenant(ctx, req.(*GetTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenancies_GetTenantFromWalletAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTenantFromWalletAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenanciesServer).GetTenantFromWalletAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tenancies_GetTenantFromWalletAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenanciesServer).GetTenantFromWalletAddress(ctx, req.(*GetTenantFromWalletAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenancies_GetTenantLimits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTenantLimitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenanciesServer).GetTenantLimits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tenancies_GetTenantLimits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenanciesServer).GetTenantLimits(ctx, req.(*GetTenantLimitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenancies_UpdateTenantRootPrincipals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTenantRootPrincipalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenanciesServer).UpdateTenantRootPrincipals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tenancies_UpdateTenantRootPrincipals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenanciesServer).UpdateTenantRootPrincipals(ctx, req.(*UpdateTenantRootPrincipalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenancies_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenanciesServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tenancies_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenanciesServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenancies_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenanciesServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tenancies_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenanciesServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenancies_GetUserCaps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCapsTenantUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenanciesServer).GetUserCaps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tenancies_GetUserCaps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenanciesServer).GetUserCaps(ctx, req.(*GetCapsTenantUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenancies_GetPublicTenantInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicTenantInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenanciesServer).GetPublicTenantInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tenancies_GetPublicTenantInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenanciesServer).GetPublicTenantInfo(ctx, req.(*GetPublicTenantInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenancies_SetLastAnchorTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLastAnchorTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenanciesServer).SetLastAnchorTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tenancies_SetLastAnchorTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenanciesServer).SetLastAnchorTime(ctx, req.(*SetLastAnchorTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenancies_SetAnchorInterval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAnchorIntervalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenanciesServer).SetAnchorInterval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tenancies_SetAnchorInterval_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenanciesServer).SetAnchorInterval(ctx, req.(*SetAnchorIntervalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenancies_UpdateTenantConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTenantConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenanciesServer).UpdateTenantConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tenancies_UpdateTenantConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenanciesServer).UpdateTenantConfiguration(ctx, req.(*UpdateTenantConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenancies_GetTopicFromTesseraPubKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopicFromPubKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenanciesServer).GetTopicFromTesseraPubKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tenancies_GetTopicFromTesseraPubKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenanciesServer).GetTopicFromTesseraPubKey(ctx, req.(*TopicFromPubKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenancies_CountUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenanciesServer).CountUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tenancies_CountUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenanciesServer).CountUsers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenancies_GetUserTenantIDTokenHint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserTenantIDTokenHintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenanciesServer).GetUserTenantIDTokenHint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tenancies_GetUserTenantIDTokenHint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenanciesServer).GetUserTenantIDTokenHint(ctx, req.(*UserTenantIDTokenHintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Tenancies_ServiceDesc is the grpc.ServiceDesc for Tenancies service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tenancies_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "archivist.v1.Tenancies",
	HandlerType: (*TenanciesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLimitsForCurrentTenant",
			Handler:    _Tenancies_GetLimitsForCurrentTenant_Handler,
		},
		{
			MethodName: "GetInviteTokenHint",
			Handler:    _Tenancies_GetInviteTokenHint_Handler,
		},
		{
			MethodName: "GetNewTenantTokenHint",
			Handler:    _Tenancies_GetNewTenantTokenHint_Handler,
		},
		{
			MethodName: "GetTenantRootPrincipals",
			Handler:    _Tenancies_GetTenantRootPrincipals_Handler,
		},
		{
			MethodName: "GetAdminTenantInfo",
			Handler:    _Tenancies_GetAdminTenantInfo_Handler,
		},
		{
			MethodName: "UpdateTenant",
			Handler:    _Tenancies_UpdateTenant_Handler,
		},
		{
			MethodName: "GetTenantID",
			Handler:    _Tenancies_GetTenantID_Handler,
		},
		{
			MethodName: "GetPublicTenant",
			Handler:    _Tenancies_GetPublicTenant_Handler,
		},
		{
			MethodName: "GetCurrentTenant",
			Handler:    _Tenancies_GetCurrentTenant_Handler,
		},
		{
			MethodName: "ListTenants",
			Handler:    _Tenancies_ListTenants_Handler,
		},
		{
			MethodName: "GetTenant",
			Handler:    _Tenancies_GetTenant_Handler,
		},
		{
			MethodName: "GetTenantFromWalletAddress",
			Handler:    _Tenancies_GetTenantFromWalletAddress_Handler,
		},
		{
			MethodName: "GetTenantLimits",
			Handler:    _Tenancies_GetTenantLimits_Handler,
		},
		{
			MethodName: "UpdateTenantRootPrincipals",
			Handler:    _Tenancies_UpdateTenantRootPrincipals_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _Tenancies_ListUsers_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Tenancies_DeleteUser_Handler,
		},
		{
			MethodName: "GetUserCaps",
			Handler:    _Tenancies_GetUserCaps_Handler,
		},
		{
			MethodName: "GetPublicTenantInfo",
			Handler:    _Tenancies_GetPublicTenantInfo_Handler,
		},
		{
			MethodName: "SetLastAnchorTime",
			Handler:    _Tenancies_SetLastAnchorTime_Handler,
		},
		{
			MethodName: "SetAnchorInterval",
			Handler:    _Tenancies_SetAnchorInterval_Handler,
		},
		{
			MethodName: "UpdateTenantConfiguration",
			Handler:    _Tenancies_UpdateTenantConfiguration_Handler,
		},
		{
			MethodName: "GetTopicFromTesseraPubKey",
			Handler:    _Tenancies_GetTopicFromTesseraPubKey_Handler,
		},
		{
			MethodName: "CountUsers",
			Handler:    _Tenancies_CountUsers_Handler,
		},
		{
			MethodName: "GetUserTenantIDTokenHint",
			Handler:    _Tenancies_GetUserTenantIDTokenHint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tenancies/v1/tenancies/tenancies.proto",
}
