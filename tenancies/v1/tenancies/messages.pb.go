// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.3
// source: tenancies/v1/tenancies/messages.proto

package tenancies

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	assets "github.com/rkvst/go-rkvstcommon-api-gen/assets/v2/assets"
	quorumnetwork "github.com/rkvst/go-rkvstcommon-api-gen/quorumnetwork/v1/quorumnetwork"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Tier int32

const (
	Tier_TIER_UNSPECIFIED Tier = 0
	Tier_FREE             Tier = 1
	Tier_PREMIUM          Tier = 2
)

// Enum value maps for Tier.
var (
	Tier_name = map[int32]string{
		0: "TIER_UNSPECIFIED",
		1: "FREE",
		2: "PREMIUM",
	}
	Tier_value = map[string]int32{
		"TIER_UNSPECIFIED": 0,
		"FREE":             1,
		"PREMIUM":          2,
	}
)

func (x Tier) Enum() *Tier {
	p := new(Tier)
	*p = x
	return p
}

func (x Tier) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Tier) Descriptor() protoreflect.EnumDescriptor {
	return file_tenancies_v1_tenancies_messages_proto_enumTypes[0].Descriptor()
}

func (Tier) Type() protoreflect.EnumType {
	return &file_tenancies_v1_tenancies_messages_proto_enumTypes[0]
}

func (x Tier) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Tier.Descriptor instead.
func (Tier) EnumDescriptor() ([]byte, []int) {
	return file_tenancies_v1_tenancies_messages_proto_rawDescGZIP(), []int{0}
}

type GetTenantIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Issuer                      string `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
	Subject                     string `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	IsSocial                    bool   `protobuf:"varint,3,opt,name=is_social,json=isSocial,proto3" json:"is_social,omitempty"`
	Email                       string `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	Oid                         string `protobuf:"bytes,5,opt,name=oid,proto3" json:"oid,omitempty"`
	IsNewUser                   bool   `protobuf:"varint,6,opt,name=is_new_user,json=isNewUser,proto3" json:"is_new_user,omitempty"`
	JitLoginhintTenantId        string `protobuf:"bytes,7,opt,name=jit_loginhint_tenant_id,json=jitLoginhintTenantId,proto3" json:"jit_loginhint_tenant_id,omitempty"`
	JitInvitehintTenantId       string `protobuf:"bytes,8,opt,name=jit_invitehint_tenant_id,json=jitInvitehintTenantId,proto3" json:"jit_invitehint_tenant_id,omitempty"`
	JitInvitehintRecipientEmail string `protobuf:"bytes,9,opt,name=jit_invitehint_recipient_email,json=jitInvitehintRecipientEmail,proto3" json:"jit_invitehint_recipient_email,omitempty"`
	JitInvitehintInviteId       string `protobuf:"bytes,10,opt,name=jit_invitehint_invite_id,json=jitInvitehintInviteId,proto3" json:"jit_invitehint_invite_id,omitempty"`
	JitLoginhintNewTenant       bool   `protobuf:"varint,11,opt,name=jit_loginhint_new_tenant,json=jitLoginhintNewTenant,proto3" json:"jit_loginhint_new_tenant,omitempty"`
}

func (x *GetTenantIDRequest) Reset() {
	*x = GetTenantIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTenantIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTenantIDRequest) ProtoMessage() {}

func (x *GetTenantIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTenantIDRequest.ProtoReflect.Descriptor instead.
func (*GetTenantIDRequest) Descriptor() ([]byte, []int) {
	return file_tenancies_v1_tenancies_messages_proto_rawDescGZIP(), []int{0}
}

func (x *GetTenantIDRequest) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *GetTenantIDRequest) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *GetTenantIDRequest) GetIsSocial() bool {
	if x != nil {
		return x.IsSocial
	}
	return false
}

func (x *GetTenantIDRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *GetTenantIDRequest) GetOid() string {
	if x != nil {
		return x.Oid
	}
	return ""
}

func (x *GetTenantIDRequest) GetIsNewUser() bool {
	if x != nil {
		return x.IsNewUser
	}
	return false
}

func (x *GetTenantIDRequest) GetJitLoginhintTenantId() string {
	if x != nil {
		return x.JitLoginhintTenantId
	}
	return ""
}

func (x *GetTenantIDRequest) GetJitInvitehintTenantId() string {
	if x != nil {
		return x.JitInvitehintTenantId
	}
	return ""
}

func (x *GetTenantIDRequest) GetJitInvitehintRecipientEmail() string {
	if x != nil {
		return x.JitInvitehintRecipientEmail
	}
	return ""
}

func (x *GetTenantIDRequest) GetJitInvitehintInviteId() string {
	if x != nil {
		return x.JitInvitehintInviteId
	}
	return ""
}

func (x *GetTenantIDRequest) GetJitLoginhintNewTenant() bool {
	if x != nil {
		return x.JitLoginhintNewTenant
	}
	return false
}

type TenantIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identity  string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	Tier      Tier   `protobuf:"varint,2,opt,name=tier,proto3,enum=archivist.v1.Tier" json:"tier,omitempty"`
	NewTenant bool   `protobuf:"varint,3,opt,name=new_tenant,json=newTenant,proto3" json:"new_tenant,omitempty"`
}

func (x *TenantIDResponse) Reset() {
	*x = TenantIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TenantIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TenantIDResponse) ProtoMessage() {}

func (x *TenantIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TenantIDResponse.ProtoReflect.Descriptor instead.
func (*TenantIDResponse) Descriptor() ([]byte, []int) {
	return file_tenancies_v1_tenancies_messages_proto_rawDescGZIP(), []int{1}
}

func (x *TenantIDResponse) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *TenantIDResponse) GetTier() Tier {
	if x != nil {
		return x.Tier
	}
	return Tier_TIER_UNSPECIFIED
}

func (x *TenantIDResponse) GetNewTenant() bool {
	if x != nil {
		return x.NewTenant
	}
	return false
}

// Get the tenant information for the authenticated user making the request
type CurrentTenantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CurrentTenantRequest) Reset() {
	*x = CurrentTenantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentTenantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentTenantRequest) ProtoMessage() {}

func (x *CurrentTenantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentTenantRequest.ProtoReflect.Descriptor instead.
func (*CurrentTenantRequest) Descriptor() ([]byte, []int) {
	return file_tenancies_v1_tenancies_messages_proto_rawDescGZIP(), []int{2}
}

// Get the tenant information for a specitic tenant
type GetTenantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *GetTenantRequest) Reset() {
	*x = GetTenantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTenantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTenantRequest) ProtoMessage() {}

func (x *GetTenantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTenantRequest.ProtoReflect.Descriptor instead.
func (*GetTenantRequest) Descriptor() ([]byte, []int) {
	return file_tenancies_v1_tenancies_messages_proto_rawDescGZIP(), []int{3}
}

func (x *GetTenantRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

// Get the tenant information for a specitic DLT wallet address
type GetTenantFromWalletAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletAddress string `protobuf:"bytes,1,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
}

func (x *GetTenantFromWalletAddressRequest) Reset() {
	*x = GetTenantFromWalletAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTenantFromWalletAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTenantFromWalletAddressRequest) ProtoMessage() {}

func (x *GetTenantFromWalletAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTenantFromWalletAddressRequest.ProtoReflect.Descriptor instead.
func (*GetTenantFromWalletAddressRequest) Descriptor() ([]byte, []int) {
	return file_tenancies_v1_tenancies_messages_proto_rawDescGZIP(), []int{4}
}

func (x *GetTenantFromWalletAddressRequest) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

// This is used for PATCHing self - so the tenant is taken from the calling principal
type EnterpriseSSOConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyId  string `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	ConfigUrl string `protobuf:"bytes,2,opt,name=config_url,json=configUrl,proto3" json:"config_url,omitempty"`
	Issuer    string `protobuf:"bytes,3,opt,name=issuer,proto3" json:"issuer,omitempty"`
	ClientId  string `protobuf:"bytes,4,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// The secret passed here when setting, but must not be stored in plaintext or logged.
	ClientSecret string `protobuf:"bytes,5,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
}

func (x *EnterpriseSSOConfig) Reset() {
	*x = EnterpriseSSOConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterpriseSSOConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterpriseSSOConfig) ProtoMessage() {}

func (x *EnterpriseSSOConfig) ProtoReflect() protoreflect.Message {
	mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterpriseSSOConfig.ProtoReflect.Descriptor instead.
func (*EnterpriseSSOConfig) Descriptor() ([]byte, []int) {
	return file_tenancies_v1_tenancies_messages_proto_rawDescGZIP(), []int{5}
}

func (x *EnterpriseSSOConfig) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *EnterpriseSSOConfig) GetConfigUrl() string {
	if x != nil {
		return x.ConfigUrl
	}
	return ""
}

func (x *EnterpriseSSOConfig) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *EnterpriseSSOConfig) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *EnterpriseSSOConfig) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

// Tenant information
type TenantResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identity string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	// root_principal is DEPRECATED and will be removed in a future release
	// it remains for old installations and for the one true tenant IDP issuer
	RootPrincipal  *assets.Principal   `protobuf:"bytes,2,opt,name=root_principal,json=rootPrincipal,proto3" json:"root_principal,omitempty"`
	WalletKeyName  string              `protobuf:"bytes,3,opt,name=wallet_key_name,json=walletKeyName,proto3" json:"wallet_key_name,omitempty"`
	WalletAddress  string              `protobuf:"bytes,4,opt,name=wallet_address,json=walletAddress,proto3" json:"wallet_address,omitempty"`
	RootPrincipals []*assets.Principal `protobuf:"bytes,7,rep,name=root_principals,json=rootPrincipals,proto3" json:"root_principals,omitempty"`
	Limits         map[string]int32    `protobuf:"bytes,8,rep,name=limits,proto3" json:"limits,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// We dont need these as we can figure out if things enabled from the limits map
	// above
	// storage_integrity includes the enabled storage_integrity values for the tenant.
	// Currently we only support LEDGER *and* TENANT_STORAGE or just TENANT_STORAGE
	// This is only here for migration to new ProofMechanism - will be reserved at a
	// later date.
	StorageIntegrity []assets.StorageIntegrity `protobuf:"varint,9,rep,packed,name=storage_integrity,json=storageIntegrity,proto3,enum=archivist.v2.StorageIntegrity" json:"storage_integrity,omitempty"`
	// proof_mechanism includes the enabled proof_mechanism values for the tenant.
	// Currently we only support KHIPU *and* SIMPLE_HASH or just SIMPLE_HASH
	ProofMechanism []assets.ProofMechanism `protobuf:"varint,10,rep,packed,name=proof_mechanism,json=proofMechanism,proto3,enum=archivist.v2.ProofMechanism" json:"proof_mechanism,omitempty"`
	Tier           Tier                    `protobuf:"varint,11,opt,name=tier,proto3,enum=archivist.v1.Tier" json:"tier,omitempty"`
	// map of DLT networks indexed by chain ID
	QuorumNetworks map[string]*quorumnetwork.QuorumNetwork `protobuf:"bytes,12,rep,name=quorum_networks,json=quorumNetworks,proto3" json:"quorum_networks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// verified domain for the tenant
	VerifiedDomain string `protobuf:"bytes,13,opt,name=verified_domain,json=verifiedDomain,proto3" json:"verified_domain,omitempty"`
	// Friendly display name shown to users within the tenant.
	DisplayName string `protobuf:"bytes,14,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// timestamp of last anchor
	LastAnchorTime int64 `protobuf:"varint,15,opt,name=last_anchor_time,json=lastAnchorTime,proto3" json:"last_anchor_time,omitempty"`
	// hash schedule in seconds
	AnchorInterval       int32                `protobuf:"varint,16,opt,name=anchor_interval,json=anchorInterval,proto3" json:"anchor_interval,omitempty"`
	EnterpriseSsoEnabled bool                 `protobuf:"varint,17,opt,name=enterprise_sso_enabled,json=enterpriseSsoEnabled,proto3" json:"enterprise_sso_enabled,omitempty"`
	EnterpriseSsoConfig  *EnterpriseSSOConfig `protobuf:"bytes,18,opt,name=enterprise_sso_config,json=enterpriseSsoConfig,proto3" json:"enterprise_sso_config,omitempty"`
}

func (x *TenantResponse) Reset() {
	*x = TenantResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TenantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TenantResponse) ProtoMessage() {}

func (x *TenantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TenantResponse.ProtoReflect.Descriptor instead.
func (*TenantResponse) Descriptor() ([]byte, []int) {
	return file_tenancies_v1_tenancies_messages_proto_rawDescGZIP(), []int{6}
}

func (x *TenantResponse) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *TenantResponse) GetRootPrincipal() *assets.Principal {
	if x != nil {
		return x.RootPrincipal
	}
	return nil
}

func (x *TenantResponse) GetWalletKeyName() string {
	if x != nil {
		return x.WalletKeyName
	}
	return ""
}

func (x *TenantResponse) GetWalletAddress() string {
	if x != nil {
		return x.WalletAddress
	}
	return ""
}

func (x *TenantResponse) GetRootPrincipals() []*assets.Principal {
	if x != nil {
		return x.RootPrincipals
	}
	return nil
}

func (x *TenantResponse) GetLimits() map[string]int32 {
	if x != nil {
		return x.Limits
	}
	return nil
}

func (x *TenantResponse) GetStorageIntegrity() []assets.StorageIntegrity {
	if x != nil {
		return x.StorageIntegrity
	}
	return nil
}

func (x *TenantResponse) GetProofMechanism() []assets.ProofMechanism {
	if x != nil {
		return x.ProofMechanism
	}
	return nil
}

func (x *TenantResponse) GetTier() Tier {
	if x != nil {
		return x.Tier
	}
	return Tier_TIER_UNSPECIFIED
}

func (x *TenantResponse) GetQuorumNetworks() map[string]*quorumnetwork.QuorumNetwork {
	if x != nil {
		return x.QuorumNetworks
	}
	return nil
}

func (x *TenantResponse) GetVerifiedDomain() string {
	if x != nil {
		return x.VerifiedDomain
	}
	return ""
}

func (x *TenantResponse) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *TenantResponse) GetLastAnchorTime() int64 {
	if x != nil {
		return x.LastAnchorTime
	}
	return 0
}

func (x *TenantResponse) GetAnchorInterval() int32 {
	if x != nil {
		return x.AnchorInterval
	}
	return 0
}

func (x *TenantResponse) GetEnterpriseSsoEnabled() bool {
	if x != nil {
		return x.EnterpriseSsoEnabled
	}
	return false
}

func (x *TenantResponse) GetEnterpriseSsoConfig() *EnterpriseSSOConfig {
	if x != nil {
		return x.EnterpriseSsoConfig
	}
	return nil
}

type SetLastAnchorTimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identity       string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	LastAnchorTime int64  `protobuf:"varint,2,opt,name=last_anchor_time,json=lastAnchorTime,proto3" json:"last_anchor_time,omitempty"`
}

func (x *SetLastAnchorTimeRequest) Reset() {
	*x = SetLastAnchorTimeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetLastAnchorTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLastAnchorTimeRequest) ProtoMessage() {}

func (x *SetLastAnchorTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLastAnchorTimeRequest.ProtoReflect.Descriptor instead.
func (*SetLastAnchorTimeRequest) Descriptor() ([]byte, []int) {
	return file_tenancies_v1_tenancies_messages_proto_rawDescGZIP(), []int{7}
}

func (x *SetLastAnchorTimeRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *SetLastAnchorTimeRequest) GetLastAnchorTime() int64 {
	if x != nil {
		return x.LastAnchorTime
	}
	return 0
}

// Set the frequency of anchor hash generation.
// Ranges from 1 hour to 1 year
type SetAnchorIntervalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identity       string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	AnchorInterval int32  `protobuf:"varint,2,opt,name=anchor_interval,json=anchorInterval,proto3" json:"anchor_interval,omitempty"`
}

func (x *SetAnchorIntervalRequest) Reset() {
	*x = SetAnchorIntervalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAnchorIntervalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAnchorIntervalRequest) ProtoMessage() {}

func (x *SetAnchorIntervalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAnchorIntervalRequest.ProtoReflect.Descriptor instead.
func (*SetAnchorIntervalRequest) Descriptor() ([]byte, []int) {
	return file_tenancies_v1_tenancies_messages_proto_rawDescGZIP(), []int{8}
}

func (x *SetAnchorIntervalRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *SetAnchorIntervalRequest) GetAnchorInterval() int32 {
	if x != nil {
		return x.AnchorInterval
	}
	return 0
}

// Get the list of current tenant root user principals
type GetTenantRootPrincipalsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetTenantRootPrincipalsRequest) Reset() {
	*x = GetTenantRootPrincipalsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTenantRootPrincipalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTenantRootPrincipalsRequest) ProtoMessage() {}

func (x *GetTenantRootPrincipalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTenantRootPrincipalsRequest.ProtoReflect.Descriptor instead.
func (*GetTenantRootPrincipalsRequest) Descriptor() ([]byte, []int) {
	return file_tenancies_v1_tenancies_messages_proto_rawDescGZIP(), []int{9}
}

// Get admin-only information for the current tenancy
type GetAdminTenantInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAdminTenantInfoRequest) Reset() {
	*x = GetAdminTenantInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAdminTenantInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAdminTenantInfoRequest) ProtoMessage() {}

func (x *GetAdminTenantInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAdminTenantInfoRequest.ProtoReflect.Descriptor instead.
func (*GetAdminTenantInfoRequest) Descriptor() ([]byte, []int) {
	return file_tenancies_v1_tenancies_messages_proto_rawDescGZIP(), []int{10}
}

// Get publicly available information for a specific tenant
type GetPublicTenantInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *GetPublicTenantInfoRequest) Reset() {
	*x = GetPublicTenantInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPublicTenantInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublicTenantInfoRequest) ProtoMessage() {}

func (x *GetPublicTenantInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublicTenantInfoRequest.ProtoReflect.Descriptor instead.
func (*GetPublicTenantInfoRequest) Descriptor() ([]byte, []int) {
	return file_tenancies_v1_tenancies_messages_proto_rawDescGZIP(), []int{11}
}

func (x *GetPublicTenantInfoRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

// Get publicly available information for a specific tenant
type GetPublicTenantInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identity       string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	VerifiedDomain string `protobuf:"bytes,2,opt,name=verified_domain,json=verifiedDomain,proto3" json:"verified_domain,omitempty"`
}

func (x *GetPublicTenantInfoResponse) Reset() {
	*x = GetPublicTenantInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPublicTenantInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublicTenantInfoResponse) ProtoMessage() {}

func (x *GetPublicTenantInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublicTenantInfoResponse.ProtoReflect.Descriptor instead.
func (*GetPublicTenantInfoResponse) Descriptor() ([]byte, []int) {
	return file_tenancies_v1_tenancies_messages_proto_rawDescGZIP(), []int{12}
}

func (x *GetPublicTenantInfoResponse) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *GetPublicTenantInfoResponse) GetVerifiedDomain() string {
	if x != nil {
		return x.VerifiedDomain
	}
	return ""
}

// A list of current tenant root user principals
type GetTenantRootPrincipalsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootPrincipals []*assets.Principal `protobuf:"bytes,1,rep,name=root_principals,json=rootPrincipals,proto3" json:"root_principals,omitempty"`
}

func (x *GetTenantRootPrincipalsResponse) Reset() {
	*x = GetTenantRootPrincipalsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTenantRootPrincipalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTenantRootPrincipalsResponse) ProtoMessage() {}

func (x *GetTenantRootPrincipalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTenantRootPrincipalsResponse.ProtoReflect.Descriptor instead.
func (*GetTenantRootPrincipalsResponse) Descriptor() ([]byte, []int) {
	return file_tenancies_v1_tenancies_messages_proto_rawDescGZIP(), []int{13}
}

func (x *GetTenantRootPrincipalsResponse) GetRootPrincipals() []*assets.Principal {
	if x != nil {
		return x.RootPrincipals
	}
	return nil
}

type ListTenantsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize  int32  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// list tenants with a specified proof mechanism enabled
	ProofMechanism       assets.ProofMechanism `protobuf:"varint,3,opt,name=proof_mechanism,json=proofMechanism,proto3,enum=archivist.v2.ProofMechanism" json:"proof_mechanism,omitempty"`
	EnterpriseSsoEnabled bool                  `protobuf:"varint,4,opt,name=enterprise_sso_enabled,json=enterpriseSsoEnabled,proto3" json:"enterprise_sso_enabled,omitempty"`
	VerifiedDomain       string                `protobuf:"bytes,5,opt,name=verified_domain,json=verifiedDomain,proto3" json:"verified_domain,omitempty"`
}

func (x *ListTenantsRequest) Reset() {
	*x = ListTenantsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTenantsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTenantsRequest) ProtoMessage() {}

func (x *ListTenantsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTenantsRequest.ProtoReflect.Descriptor instead.
func (*ListTenantsRequest) Descriptor() ([]byte, []int) {
	return file_tenancies_v1_tenancies_messages_proto_rawDescGZIP(), []int{14}
}

func (x *ListTenantsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListTenantsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListTenantsRequest) GetProofMechanism() assets.ProofMechanism {
	if x != nil {
		return x.ProofMechanism
	}
	return assets.ProofMechanism(0)
}

func (x *ListTenantsRequest) GetEnterpriseSsoEnabled() bool {
	if x != nil {
		return x.EnterpriseSsoEnabled
	}
	return false
}

func (x *ListTenantsRequest) GetVerifiedDomain() string {
	if x != nil {
		return x.VerifiedDomain
	}
	return ""
}

type ListTenantsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenants       []*TenantResponse `protobuf:"bytes,1,rep,name=tenants,proto3" json:"tenants,omitempty"`
	NextPageToken string            `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListTenantsResponse) Reset() {
	*x = ListTenantsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTenantsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTenantsResponse) ProtoMessage() {}

func (x *ListTenantsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTenantsResponse.ProtoReflect.Descriptor instead.
func (*ListTenantsResponse) Descriptor() ([]byte, []int) {
	return file_tenancies_v1_tenancies_messages_proto_rawDescGZIP(), []int{15}
}

func (x *ListTenantsResponse) GetTenants() []*TenantResponse {
	if x != nil {
		return x.Tenants
	}
	return nil
}

func (x *ListTenantsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Update the list of tenant root user principals
type UpdateTenantRootPrincipalsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootPrincipals []*assets.Principal `protobuf:"bytes,1,rep,name=root_principals,json=rootPrincipals,proto3" json:"root_principals,omitempty"`
}

func (x *UpdateTenantRootPrincipalsRequest) Reset() {
	*x = UpdateTenantRootPrincipalsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTenantRootPrincipalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTenantRootPrincipalsRequest) ProtoMessage() {}

func (x *UpdateTenantRootPrincipalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTenantRootPrincipalsRequest.ProtoReflect.Descriptor instead.
func (*UpdateTenantRootPrincipalsRequest) Descriptor() ([]byte, []int) {
	return file_tenancies_v1_tenancies_messages_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateTenantRootPrincipalsRequest) GetRootPrincipals() []*assets.Principal {
	if x != nil {
		return x.RootPrincipals
	}
	return nil
}

// Update the tenant's enabled asset proof mechanisms
type UpdateProofMechanismRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identity       string                  `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	ProofMechanism []assets.ProofMechanism `protobuf:"varint,2,rep,packed,name=proof_mechanism,json=proofMechanism,proto3,enum=archivist.v2.ProofMechanism" json:"proof_mechanism,omitempty"`
}

func (x *UpdateProofMechanismRequest) Reset() {
	*x = UpdateProofMechanismRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProofMechanismRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProofMechanismRequest) ProtoMessage() {}

func (x *UpdateProofMechanismRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProofMechanismRequest.ProtoReflect.Descriptor instead.
func (*UpdateProofMechanismRequest) Descriptor() ([]byte, []int) {
	return file_tenancies_v1_tenancies_messages_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateProofMechanismRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *UpdateProofMechanismRequest) GetProofMechanism() []assets.ProofMechanism {
	if x != nil {
		return x.ProofMechanism
	}
	return nil
}

type UpdateProofMechanismResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateProofMechanismResponse) Reset() {
	*x = UpdateProofMechanismResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProofMechanismResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProofMechanismResponse) ProtoMessage() {}

func (x *UpdateProofMechanismResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProofMechanismResponse.ProtoReflect.Descriptor instead.
func (*UpdateProofMechanismResponse) Descriptor() ([]byte, []int) {
	return file_tenancies_v1_tenancies_messages_proto_rawDescGZIP(), []int{18}
}

// Get the list of current tenant caps limits
type GetTenantLimitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identity string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (x *GetTenantLimitsRequest) Reset() {
	*x = GetTenantLimitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTenantLimitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTenantLimitsRequest) ProtoMessage() {}

func (x *GetTenantLimitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTenantLimitsRequest.ProtoReflect.Descriptor instead.
func (*GetTenantLimitsRequest) Descriptor() ([]byte, []int) {
	return file_tenancies_v1_tenancies_messages_proto_rawDescGZIP(), []int{19}
}

func (x *GetTenantLimitsRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

// Get the list of current tenant caps limits for current tenant
type GetLimitsForCurrentTenantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetLimitsForCurrentTenantRequest) Reset() {
	*x = GetLimitsForCurrentTenantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLimitsForCurrentTenantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLimitsForCurrentTenantRequest) ProtoMessage() {}

func (x *GetLimitsForCurrentTenantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLimitsForCurrentTenantRequest.ProtoReflect.Descriptor instead.
func (*GetLimitsForCurrentTenantRequest) Descriptor() ([]byte, []int) {
	return file_tenancies_v1_tenancies_messages_proto_rawDescGZIP(), []int{20}
}

type GetLimitsForCurrentTenantResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limits map[string]int32 `protobuf:"bytes,1,rep,name=limits,proto3" json:"limits,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *GetLimitsForCurrentTenantResponse) Reset() {
	*x = GetLimitsForCurrentTenantResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLimitsForCurrentTenantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLimitsForCurrentTenantResponse) ProtoMessage() {}

func (x *GetLimitsForCurrentTenantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLimitsForCurrentTenantResponse.ProtoReflect.Descriptor instead.
func (*GetLimitsForCurrentTenantResponse) Descriptor() ([]byte, []int) {
	return file_tenancies_v1_tenancies_messages_proto_rawDescGZIP(), []int{21}
}

func (x *GetLimitsForCurrentTenantResponse) GetLimits() map[string]int32 {
	if x != nil {
		return x.Limits
	}
	return nil
}

type TenantLimitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identity string           `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	Limits   map[string]int32 `protobuf:"bytes,2,rep,name=limits,proto3" json:"limits,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *TenantLimitsResponse) Reset() {
	*x = TenantLimitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TenantLimitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TenantLimitsResponse) ProtoMessage() {}

func (x *TenantLimitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TenantLimitsResponse.ProtoReflect.Descriptor instead.
func (*TenantLimitsResponse) Descriptor() ([]byte, []int) {
	return file_tenancies_v1_tenancies_messages_proto_rawDescGZIP(), []int{22}
}

func (x *TenantLimitsResponse) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *TenantLimitsResponse) GetLimits() map[string]int32 {
	if x != nil {
		return x.Limits
	}
	return nil
}

type TopicFromPubKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the chain id of the quorum network
	ChainID string `protobuf:"bytes,1,opt,name=chainID,proto3" json:"chainID,omitempty"`
	// the tessera public key
	TesseraPubKey string `protobuf:"bytes,2,opt,name=tesseraPubKey,proto3" json:"tesseraPubKey,omitempty"`
}

func (x *TopicFromPubKeyRequest) Reset() {
	*x = TopicFromPubKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopicFromPubKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicFromPubKeyRequest) ProtoMessage() {}

func (x *TopicFromPubKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicFromPubKeyRequest.ProtoReflect.Descriptor instead.
func (*TopicFromPubKeyRequest) Descriptor() ([]byte, []int) {
	return file_tenancies_v1_tenancies_messages_proto_rawDescGZIP(), []int{23}
}

func (x *TopicFromPubKeyRequest) GetChainID() string {
	if x != nil {
		return x.ChainID
	}
	return ""
}

func (x *TopicFromPubKeyRequest) GetTesseraPubKey() string {
	if x != nil {
		return x.TesseraPubKey
	}
	return ""
}

type TopicFromPubKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (x *TopicFromPubKeyResponse) Reset() {
	*x = TopicFromPubKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopicFromPubKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicFromPubKeyResponse) ProtoMessage() {}

func (x *TopicFromPubKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicFromPubKeyResponse.ProtoReflect.Descriptor instead.
func (*TopicFromPubKeyResponse) Descriptor() ([]byte, []int) {
	return file_tenancies_v1_tenancies_messages_proto_rawDescGZIP(), []int{24}
}

func (x *TopicFromPubKeyResponse) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

// From a root principal's perspective this is their tenant "resource". Other details
// captured in TenantResponse are internal, and not for direct consumption by users.
type AdminTenantResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identity             string               `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	VerifiedDomain       string               `protobuf:"bytes,2,opt,name=verified_domain,json=verifiedDomain,proto3" json:"verified_domain,omitempty"`
	DisplayName          string               `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	EnterpriseSsoEnabled bool                 `protobuf:"varint,4,opt,name=enterprise_sso_enabled,json=enterpriseSsoEnabled,proto3" json:"enterprise_sso_enabled,omitempty"`
	EnterpriseSsoConfig  *EnterpriseSSOConfig `protobuf:"bytes,5,opt,name=enterprise_sso_config,json=enterpriseSsoConfig,proto3" json:"enterprise_sso_config,omitempty"`
}

func (x *AdminTenantResponse) Reset() {
	*x = AdminTenantResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminTenantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminTenantResponse) ProtoMessage() {}

func (x *AdminTenantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminTenantResponse.ProtoReflect.Descriptor instead.
func (*AdminTenantResponse) Descriptor() ([]byte, []int) {
	return file_tenancies_v1_tenancies_messages_proto_rawDescGZIP(), []int{25}
}

func (x *AdminTenantResponse) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *AdminTenantResponse) GetVerifiedDomain() string {
	if x != nil {
		return x.VerifiedDomain
	}
	return ""
}

func (x *AdminTenantResponse) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *AdminTenantResponse) GetEnterpriseSsoEnabled() bool {
	if x != nil {
		return x.EnterpriseSsoEnabled
	}
	return false
}

func (x *AdminTenantResponse) GetEnterpriseSsoConfig() *EnterpriseSSOConfig {
	if x != nil {
		return x.EnterpriseSsoConfig
	}
	return nil
}

type UpdatableTenantPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayName         string               `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	EnterpriseSsoConfig *EnterpriseSSOConfig `protobuf:"bytes,2,opt,name=enterprise_sso_config,json=enterpriseSsoConfig,proto3" json:"enterprise_sso_config,omitempty"`
}

func (x *UpdatableTenantPayload) Reset() {
	*x = UpdatableTenantPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatableTenantPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatableTenantPayload) ProtoMessage() {}

func (x *UpdatableTenantPayload) ProtoReflect() protoreflect.Message {
	mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatableTenantPayload.ProtoReflect.Descriptor instead.
func (*UpdatableTenantPayload) Descriptor() ([]byte, []int) {
	return file_tenancies_v1_tenancies_messages_proto_rawDescGZIP(), []int{26}
}

func (x *UpdatableTenantPayload) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *UpdatableTenantPayload) GetEnterpriseSsoConfig() *EnterpriseSSOConfig {
	if x != nil {
		return x.EnterpriseSsoConfig
	}
	return nil
}

type UpdateTenantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant *UpdatableTenantPayload `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Mask   *fieldmaskpb.FieldMask  `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
}

func (x *UpdateTenantRequest) Reset() {
	*x = UpdateTenantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTenantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTenantRequest) ProtoMessage() {}

func (x *UpdateTenantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTenantRequest.ProtoReflect.Descriptor instead.
func (*UpdateTenantRequest) Descriptor() ([]byte, []int) {
	return file_tenancies_v1_tenancies_messages_proto_rawDescGZIP(), []int{27}
}

func (x *UpdateTenantRequest) GetTenant() *UpdatableTenantPayload {
	if x != nil {
		return x.Tenant
	}
	return nil
}

func (x *UpdateTenantRequest) GetMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Mask
	}
	return nil
}

type UpdateTenantConfigurationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid          string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Configuration *TenantResponse        `protobuf:"bytes,2,opt,name=configuration,proto3" json:"configuration,omitempty"`
	Mask          *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=mask,proto3" json:"mask,omitempty"`
}

func (x *UpdateTenantConfigurationRequest) Reset() {
	*x = UpdateTenantConfigurationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTenantConfigurationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTenantConfigurationRequest) ProtoMessage() {}

func (x *UpdateTenantConfigurationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tenancies_v1_tenancies_messages_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTenantConfigurationRequest.ProtoReflect.Descriptor instead.
func (*UpdateTenantConfigurationRequest) Descriptor() ([]byte, []int) {
	return file_tenancies_v1_tenancies_messages_proto_rawDescGZIP(), []int{28}
}

func (x *UpdateTenantConfigurationRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *UpdateTenantConfigurationRequest) GetConfiguration() *TenantResponse {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *UpdateTenantConfigurationRequest) GetMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Mask
	}
	return nil
}

var File_tenancies_v1_tenancies_messages_proto protoreflect.FileDescriptor

var file_tenancies_v1_tenancies_messages_proto_rawDesc = []byte{
	0x0a, 0x25, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x69,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x20, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x32,
	0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x76, 0x32, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65,
	0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32,
	0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x76, 0x31,
	0x2f, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x71,
	0x75, 0x6f, 0x72, 0x75, 0x6d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc2, 0x08, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x06, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0x92, 0x41, 0x29,
	0x32, 0x21, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x2e, 0x78, 0x80, 0x08, 0x80, 0x01, 0x01, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01,
	0x18, 0x80, 0x08, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x7a, 0x0a, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x60, 0x92, 0x41,
	0x53, 0x32, 0x4b, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x69, 0x6e,
	0x63, 0x69, 0x70, 0x61, 0x6c, 0x20, 0x28, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x20, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x29, 0x20, 0x55,
	0x73, 0x65, 0x64, 0x20, 0x69, 0x66, 0x20, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x78, 0x80,
	0x08, 0x80, 0x01, 0x01, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x32,
	0x15, 0x49, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x20, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x6c, 0x3f, 0x52, 0x08, 0x69, 0x73, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c,
	0x12, 0x3a, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x24, 0x92, 0x41, 0x21, 0x32, 0x1f, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x69, 0x6e, 0x63,
	0x69, 0x70, 0x61, 0x6c, 0x2e, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2f, 0x0a, 0x03,
	0x6f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x18,
	0x42, 0x32, 0x43, 0x20, 0x55, 0x73, 0x65, 0x72, 0x20, 0x49, 0x44, 0x20, 0x69, 0x66, 0x20, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x69, 0x0a,
	0x0b, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x49, 0x92, 0x41, 0x46, 0x32, 0x44, 0x54, 0x72, 0x75, 0x65, 0x20, 0x69, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x77, 0x61, 0x73, 0x20, 0x6a, 0x75,
	0x73, 0x74, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x28, 0x6f, 0x6e, 0x6c, 0x79,
	0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x76, 0x6f,
	0x6b, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x62, 0x32, 0x63, 0x29, 0x52, 0x09, 0x69,
	0x73, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x12, 0x82, 0x01, 0x0a, 0x17, 0x6a, 0x69, 0x74,
	0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x68, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4b, 0x92, 0x41, 0x48, 0x32,
	0x46, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x68, 0x69, 0x6e, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x20, 0x74, 0x6f, 0x2e, 0x52, 0x14, 0x6a, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x68, 0x69, 0x6e, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x84, 0x01,
	0x0a, 0x18, 0x6a, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x68, 0x69, 0x6e, 0x74,
	0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x4b, 0x92, 0x41, 0x48, 0x32, 0x46, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x20, 0x68, 0x69,
	0x6e, 0x74, 0x20, 0x63, 0x61, 0x72, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x69, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x77,
	0x61, 0x73, 0x20, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x52, 0x15, 0x6a,
	0x69, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x68, 0x69, 0x6e, 0x74, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x83, 0x01, 0x0a, 0x1e, 0x6a, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x68, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3e, 0x92,
	0x41, 0x3b, 0x32, 0x39, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x20, 0x68, 0x69, 0x6e, 0x74, 0x20,
	0x63, 0x61, 0x72, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x77, 0x61, 0x73, 0x20, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x52, 0x1b, 0x6a,
	0x69, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x68, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x58, 0x0a, 0x18, 0x6a, 0x69,
	0x74, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x68, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41,
	0x11, 0x32, 0x0f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x69, 0x74,
	0x79, 0x2e, 0xfa, 0x42, 0x08, 0x72, 0x06, 0xd0, 0x01, 0x01, 0xb0, 0x01, 0x01, 0x52, 0x15, 0x6a,
	0x69, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x68, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x49, 0x64, 0x12, 0x63, 0x0a, 0x18, 0x6a, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x68, 0x69, 0x6e, 0x74, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x32, 0x25, 0x48, 0x69, 0x6e,
	0x74, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x6e,
	0x65, 0x77, 0x20, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x52, 0x15, 0x6a, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x68, 0x69, 0x6e, 0x74,
	0x4e, 0x65, 0x77, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x22, 0xec, 0x01, 0x0a, 0x10, 0x54, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b,
	0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1f, 0x92, 0x41, 0x1c, 0x32, 0x18, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x20, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x60, 0x7b, 0x55, 0x55, 0x49, 0x44, 0x7d, 0x60, 0x40,
	0x01, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x4a, 0x0a, 0x04, 0x74,
	0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x69, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x65, 0x72, 0x42, 0x22, 0x92,
	0x41, 0x1f, 0x32, 0x1b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x20, 0x74, 0x69, 0x65, 0x72, 0x20,
	0x46, 0x52, 0x45, 0x45, 0x20, 0x6f, 0x72, 0x20, 0x50, 0x52, 0x45, 0x4d, 0x49, 0x55, 0x4d, 0x40,
	0x01, 0x52, 0x04, 0x74, 0x69, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x30, 0x92, 0x41, 0x2d,
	0x32, 0x29, 0x74, 0x72, 0x75, 0x65, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x61,
	0x20, 0x6e, 0x65, 0x77, 0x20, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x40, 0x01, 0x52, 0x09, 0x6e,
	0x65, 0x77, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x22, 0x16, 0x0a, 0x14, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x26, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x4a, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x97, 0x02, 0x0a, 0x13, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x73, 0x65, 0x53, 0x53, 0x4f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x57, 0x0a, 0x09,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x3a, 0x92, 0x41, 0x37, 0x32, 0x33, 0x50, 0x65, 0x72, 0x2d, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x20, 0x42, 0x32, 0x43, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x49, 0x44, 0x2e, 0x20,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64,
	0x20, 0x62, 0x79, 0x20, 0x52, 0x4b, 0x56, 0x53, 0x54, 0x40, 0x01, 0x52, 0x08, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05,
	0x10, 0x01, 0x18, 0x80, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x72, 0x6c,
	0x12, 0x22, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x08, 0x52, 0x06, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01,
	0x18, 0x80, 0x08, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a,
	0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x08,
	0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0x94,
	0x09, 0x0a, 0x0e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3b, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x32, 0x18, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x60, 0x7b, 0x55, 0x55, 0x49, 0x44,
	0x7d, 0x60, 0x40, 0x01, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3e,
	0x0a, 0x0e, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x69,
	0x73, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x52,
	0x0d, 0x72, 0x6f, 0x6f, 0x74, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x26,
	0x0a, 0x0f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4b,
	0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x40, 0x0a,
	0x0f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x69,
	0x73, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x52,
	0x0e, 0x72, 0x6f, 0x6f, 0x74, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x12,
	0x40, 0x0a, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x69, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x12, 0x4b, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x69, 0x73, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x52, 0x10, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x12, 0x45,
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73,
	0x6d, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x69, 0x73, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4d, 0x65, 0x63, 0x68,
	0x61, 0x6e, 0x69, 0x73, 0x6d, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x4d, 0x65, 0x63, 0x68,
	0x61, 0x6e, 0x69, 0x73, 0x6d, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x69, 0x65, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x69, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x69, 0x65, 0x72, 0x52, 0x04, 0x74, 0x69, 0x65, 0x72, 0x12, 0x59, 0x0a,
	0x0f, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x69,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x59, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0x92, 0x41, 0x2b, 0x32, 0x26, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x20, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x20,
	0x6e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x2e, 0x78, 0x80, 0x01, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0x80, 0x01, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x6e, 0x63, 0x68,
	0x6f, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x34, 0x0a, 0x16, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x5f, 0x73, 0x73,
	0x6f, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x14, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x73, 0x6f, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x55, 0x0a, 0x15, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x73, 0x65, 0x5f, 0x73, 0x73, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x69, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x53,
	0x4f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x13, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x73, 0x65, 0x53, 0x73, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x39, 0x0a, 0x0b,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5e, 0x0a, 0x13, 0x51, 0x75, 0x6f, 0x72, 0x75,
	0x6d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x69, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51,
	0x75, 0x6f, 0x72, 0x75, 0x6d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08,
	0x06, 0x10, 0x07, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x52, 0x0b, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x22, 0x60, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74,
	0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x28, 0x0a,
	0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x6d, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x41, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x35, 0x0a, 0x0f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x1a, 0x07, 0x10,
	0x80, 0xe7, 0x84, 0x0f, 0x28, 0x3c, 0x52, 0x0e, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x58, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x3a, 0x36, 0x92, 0x41, 0x33, 0x0a, 0x31, 0x32,
	0x2f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73,
	0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x20, 0x72, 0x6f, 0x6f, 0x74,
	0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73,
	0x22, 0x53, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x3a, 0x36, 0x92,
	0x41, 0x33, 0x0a, 0x31, 0x32, 0x2f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x20, 0x72, 0x6f, 0x6f, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x70, 0x72, 0x69, 0x6e, 0x63,
	0x69, 0x70, 0x61, 0x6c, 0x73, 0x22, 0xf1, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0xd2, 0x01, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0xbd, 0x01, 0x92, 0x41, 0xb1, 0x01, 0x32, 0xac, 0x01, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x20,
	0x55, 0x55, 0x49, 0x44, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x60, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x2f, 0x7b, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x60, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x20, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x20, 0x65, 0x2e, 0x67, 0x2e, 0x20, 0x60, 0x61, 0x64, 0x64, 0x33, 0x30, 0x32, 0x33, 0x35,
	0x2d, 0x31, 0x34, 0x32, 0x34, 0x2d, 0x34, 0x66, 0x64, 0x61, 0x2d, 0x38, 0x34, 0x30, 0x61, 0x2d,
	0x64, 0x35, 0x65, 0x66, 0x38, 0x32, 0x63, 0x34, 0x63, 0x39, 0x36, 0x66, 0x60, 0x20, 0x66, 0x72,
	0x6f, 0x6d, 0x20, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x60, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x2f, 0x61, 0x64, 0x64, 0x33, 0x30, 0x32, 0x33, 0x35, 0x2d, 0x31, 0x34, 0x32,
	0x34, 0x2d, 0x34, 0x66, 0x64, 0x61, 0x2d, 0x38, 0x34, 0x30, 0x61, 0x2d, 0x64, 0x35, 0x65, 0x66,
	0x38, 0x32, 0x63, 0x34, 0x63, 0x39, 0x36, 0x66, 0x60, 0x40, 0x01, 0xfa, 0x42, 0x05, 0x72, 0x03,
	0xb0, 0x01, 0x01, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0xfc, 0x01, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x3a, 0x97,
	0x01, 0x92, 0x41, 0x93, 0x01, 0x0a, 0x30, 0x32, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61,
	0x6c, 0x6c, 0x79, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x32, 0x5f, 0x7b, 0x20, 0x20, 0x22, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x3a, 0x20, 0x22, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2f,
	0x61, 0x64, 0x64, 0x33, 0x30, 0x32, 0x33, 0x35, 0x2d, 0x31, 0x34, 0x32, 0x34, 0x2d, 0x34, 0x66,
	0x64, 0x61, 0x2d, 0x38, 0x34, 0x30, 0x61, 0x2d, 0x64, 0x35, 0x65, 0x66, 0x38, 0x32, 0x63, 0x34,
	0x63, 0x39, 0x36, 0x66, 0x22, 0x2c, 0x20, 0x20, 0x22, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x3a, 0x20, 0x22, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x6c, 0x74, 0x64, 0x22, 0x7d, 0x22, 0xd1, 0x02, 0x0a, 0x1f, 0x47, 0x65, 0x74,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69,
	0x70, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0f,
	0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x69, 0x73,
	0x74, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x52, 0x0e,
	0x72, 0x6f, 0x6f, 0x74, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x3a, 0xeb,
	0x01, 0x92, 0x41, 0xe7, 0x01, 0x0a, 0x25, 0x32, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x20, 0x72, 0x6f, 0x6f, 0x74, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x20, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x32, 0xbd, 0x01, 0x7b,
	0x20, 0x20, 0x22, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61,
	0x6c, 0x73, 0x22, 0x3a, 0x20, 0x5b, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x22, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a,
	0x20, 0x22, 0x42, 0x6f, 0x62, 0x20, 0x53, 0x6d, 0x69, 0x74, 0x68, 0x22, 0x2c, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x22, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x22, 0x3a, 0x20, 0x22, 0x6a, 0x6f,
	0x62, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x31, 0x32, 0x33,
	0x34, 0x22, 0x2c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x22, 0x3a, 0x20, 0x22, 0x30, 0x38, 0x38, 0x33, 0x38, 0x33, 0x33, 0x36, 0x2d, 0x63, 0x33,
	0x35, 0x37, 0x2d, 0x34, 0x36, 0x30, 0x64, 0x2d, 0x39, 0x30, 0x32, 0x61, 0x2d, 0x33, 0x61, 0x62,
	0x61, 0x39, 0x35, 0x32, 0x38, 0x64, 0x64, 0x32, 0x32, 0x22, 0x2c, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x22, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x3a, 0x20, 0x22, 0x62, 0x6f, 0x62, 0x40, 0x6a,
	0x6f, 0x62, 0x22, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, 0x20, 0x5d, 0x7d, 0x22, 0xa3, 0x03, 0x0a,
	0x12, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x8c, 0x01, 0x0a, 0x0f, 0x70, 0x72, 0x6f,
	0x6f, 0x66, 0x5f, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x69, 0x73, 0x74, 0x2e, 0x76,
	0x32, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d,
	0x42, 0x45, 0x92, 0x41, 0x3a, 0x32, 0x38, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x20, 0x6d, 0x65, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x69, 0x73, 0x6d, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0xfa,
	0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x4d, 0x65,
	0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x12, 0x63, 0x0a, 0x16, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x5f, 0x73, 0x73, 0x6f, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2d, 0x92, 0x41, 0x2a, 0x32, 0x28, 0x6c, 0x69,
	0x73, 0x74, 0x20, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x20, 0x73, 0x73, 0x6f, 0x20, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x14, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x73, 0x65, 0x53, 0x73, 0x6f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x54, 0x0a, 0x0f,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x32, 0x26, 0x6c, 0x69, 0x73, 0x74,
	0x20, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68,
	0x69, 0x73, 0x20, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x22, 0x75, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x69, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x8c, 0x03, 0x0a, 0x21, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x50, 0x72,
	0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x6e, 0x0a, 0x0f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x69, 0x73, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61,
	0x6c, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x32, 0x27, 0x4e, 0x65, 0x77, 0x20, 0x6c, 0x69, 0x73, 0x74,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x20, 0x72, 0x6f, 0x6f, 0x74, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x20, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x52,
	0x0e, 0x72, 0x6f, 0x6f, 0x74, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x3a,
	0xf6, 0x01, 0x92, 0x41, 0xf2, 0x01, 0x0a, 0x30, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x20, 0x72, 0x6f, 0x6f, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x70, 0x72,
	0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x32, 0xbd, 0x01, 0x7b, 0x20, 0x20, 0x22, 0x72,
	0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x22, 0x3a,
	0x20, 0x5b, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x42, 0x6f,
	0x62, 0x20, 0x53, 0x6d, 0x69, 0x74, 0x68, 0x22, 0x2c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x22, 0x3a, 0x20, 0x22, 0x6a, 0x6f, 0x62, 0x2e, 0x69, 0x64,
	0x70, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x31, 0x32, 0x33, 0x34, 0x22, 0x2c, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x3a, 0x20,
	0x22, 0x30, 0x38, 0x38, 0x33, 0x38, 0x33, 0x33, 0x36, 0x2d, 0x63, 0x33, 0x35, 0x37, 0x2d, 0x34,
	0x36, 0x30, 0x64, 0x2d, 0x39, 0x30, 0x32, 0x61, 0x2d, 0x33, 0x61, 0x62, 0x61, 0x39, 0x35, 0x32,
	0x38, 0x64, 0x64, 0x32, 0x32, 0x22, 0x2c, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x22, 0x3a, 0x20, 0x22, 0x62, 0x6f, 0x62, 0x40, 0x6a, 0x6f, 0x62, 0x22, 0x20,
	0x20, 0x20, 0x20, 0x7d, 0x20, 0x20, 0x5d, 0x7d, 0x22, 0x80, 0x02, 0x0a, 0x1b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x32,
	0x18, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x20, 0x60, 0x7b, 0x55, 0x55, 0x49, 0x44, 0x7d, 0x60, 0x40, 0x01, 0x52, 0x08, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x69, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x6d,
	0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x69, 0x73, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x42, 0x22, 0x92, 0x41,
	0x13, 0x32, 0x0f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x20, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69,
	0x73, 0x6d, 0x40, 0x01, 0xfa, 0x42, 0x09, 0x92, 0x01, 0x06, 0x08, 0x01, 0x10, 0x03, 0x18, 0x01,
	0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d,
	0x3a, 0x39, 0x92, 0x41, 0x36, 0x0a, 0x34, 0x32, 0x32, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x20, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x20, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x73, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x22, 0x1e, 0x0a, 0x1c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e,
	0x69, 0x73, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x32, 0x18, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x60,
	0x7b, 0x55, 0x55, 0x49, 0x44, 0x7d, 0x60, 0x40, 0x01, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x3a, 0x2d, 0x92, 0x41, 0x2a, 0x0a, 0x28, 0x32, 0x26, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x20, 0x63, 0x61, 0x70, 0x73, 0x20, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x22, 0x6e, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x46,
	0x6f, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x3a, 0x4a, 0x92, 0x41, 0x47, 0x0a, 0x45, 0x32, 0x43, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x6d, 0x61, 0x70, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x20, 0x63, 0x61, 0x70, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x20,
	0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x27, 0x73, 0x20, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x22, 0xee, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x46, 0x6f, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x06, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x69, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x38, 0x92, 0x41, 0x35, 0x32, 0x31, 0x6d, 0x61, 0x70,
	0x20, 0x6f, 0x66, 0x20, 0x63, 0x61, 0x70, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x20, 0x70, 0x72, 0x69, 0x6e, 0x63,
	0x69, 0x70, 0x61, 0x6c, 0x27, 0x73, 0x20, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x79, 0x40, 0x01,
	0x52, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xd6, 0x01, 0x0a, 0x14, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x08,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f,
	0x92, 0x41, 0x1c, 0x32, 0x18, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x20, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x20, 0x60, 0x7b, 0x55, 0x55, 0x49, 0x44, 0x7d, 0x60, 0x40, 0x01, 0x52,
	0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x06, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x69, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x58, 0x0a, 0x16,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44,
	0x12, 0x24, 0x0a, 0x0d, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x50, 0x75, 0x62, 0x4b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61,
	0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x22, 0x2f, 0x0a, 0x17, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x46,
	0x72, 0x6f, 0x6d, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x22, 0xa7, 0x04, 0x0a, 0x13, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3b, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x32, 0x18, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x20, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x60, 0x7b, 0x55, 0x55, 0x49, 0x44, 0x7d, 0x60,
	0x40, 0x01, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x0f,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x59, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0x92, 0x41, 0x2b,
	0x32, 0x26, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x20, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x6c, 0x79, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x78, 0x80, 0x01, 0xfa, 0x42, 0x05, 0x72, 0x03,
	0x18, 0x80, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x34, 0x0a, 0x16, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x5f, 0x73,
	0x73, 0x6f, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x73, 0x6f, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x55, 0x0a, 0x15, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x5f, 0x73, 0x73, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x69, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53,
	0x53, 0x4f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x13, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x53, 0x73, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3a, 0xc1, 0x01,
	0x92, 0x41, 0xbd, 0x01, 0x0a, 0x31, 0x32, 0x2f, 0x56, 0x69, 0x65, 0x77, 0x20, 0x6f, 0x66, 0x20,
	0x6f, 0x77, 0x6e, 0x20, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x72, 0x6f, 0x6f, 0x74, 0x20, 0x70, 0x72, 0x69,
	0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x2e, 0x32, 0x87, 0x01, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x22,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x3a, 0x20, 0x22, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x2f, 0x30, 0x38, 0x38, 0x33, 0x38, 0x33, 0x33, 0x36, 0x2d, 0x63, 0x33, 0x35, 0x37,
	0x2d, 0x34, 0x36, 0x30, 0x64, 0x2d, 0x39, 0x30, 0x32, 0x61, 0x2d, 0x33, 0x61, 0x62, 0x61, 0x39,
	0x35, 0x32, 0x38, 0x64, 0x64, 0x32, 0x32, 0x22, 0x2c, 0x20, 0x20, 0x20, 0x20, 0x22, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x3a, 0x20,
	0x22, 0x66, 0x6f, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x2c, 0x20, 0x20, 0x20, 0x20, 0x22, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x4d,
	0x79, 0x20, 0x46, 0x69, 0x72, 0x73, 0x74, 0x20, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x79, 0x22,
	0x7d, 0x22, 0xca, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x59, 0x0a, 0x0c,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x36, 0x92, 0x41, 0x2b, 0x32, 0x26, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x20, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x78,
	0x80, 0x01, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0x80, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x15, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x5f, 0x73, 0x73, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x69,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65,
	0x53, 0x53, 0x4f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x13, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x73, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x8b,
	0x02, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x69,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x06, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x04,
	0x6d, 0x61, 0x73, 0x6b, 0x3a, 0x85, 0x01, 0x92, 0x41, 0x81, 0x01, 0x0a, 0x48, 0x32, 0x46, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x20, 0x61, 0x20, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x20,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x20, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c,
	0x79, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x20, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65,
	0x20, 0x73, 0x65, 0x74, 0x2e, 0x32, 0x35, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x22, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x22, 0x3a, 0x20, 0x7b, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x66, 0x6f,
	0x6f, 0x62, 0x61, 0x72, 0x22, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x7d, 0x22, 0xcb, 0x01, 0x0a,
	0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x69, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x04, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x3a, 0x1f, 0x92, 0x41, 0x1c, 0x0a, 0x1a,
	0x32, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x20, 0x61, 0x20, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x2a, 0x33, 0x0a, 0x04, 0x54, 0x69,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x49, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x52, 0x45, 0x45,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x45, 0x4d, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x42,
	0x4a, 0x5a, 0x48, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x6b,
	0x76, 0x73, 0x74, 0x2f, 0x67, 0x6f, 0x2d, 0x72, 0x6b, 0x76, 0x73, 0x74, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2d, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x65, 0x6e, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x3b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_tenancies_v1_tenancies_messages_proto_rawDescOnce sync.Once
	file_tenancies_v1_tenancies_messages_proto_rawDescData = file_tenancies_v1_tenancies_messages_proto_rawDesc
)

func file_tenancies_v1_tenancies_messages_proto_rawDescGZIP() []byte {
	file_tenancies_v1_tenancies_messages_proto_rawDescOnce.Do(func() {
		file_tenancies_v1_tenancies_messages_proto_rawDescData = protoimpl.X.CompressGZIP(file_tenancies_v1_tenancies_messages_proto_rawDescData)
	})
	return file_tenancies_v1_tenancies_messages_proto_rawDescData
}

var file_tenancies_v1_tenancies_messages_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_tenancies_v1_tenancies_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_tenancies_v1_tenancies_messages_proto_goTypes = []interface{}{
	(Tier)(0),                                 // 0: archivist.v1.Tier
	(*GetTenantIDRequest)(nil),                // 1: archivist.v1.GetTenantIDRequest
	(*TenantIDResponse)(nil),                  // 2: archivist.v1.TenantIDResponse
	(*CurrentTenantRequest)(nil),              // 3: archivist.v1.CurrentTenantRequest
	(*GetTenantRequest)(nil),                  // 4: archivist.v1.GetTenantRequest
	(*GetTenantFromWalletAddressRequest)(nil), // 5: archivist.v1.GetTenantFromWalletAddressRequest
	(*EnterpriseSSOConfig)(nil),               // 6: archivist.v1.EnterpriseSSOConfig
	(*TenantResponse)(nil),                    // 7: archivist.v1.TenantResponse
	(*SetLastAnchorTimeRequest)(nil),          // 8: archivist.v1.SetLastAnchorTimeRequest
	(*SetAnchorIntervalRequest)(nil),          // 9: archivist.v1.SetAnchorIntervalRequest
	(*GetTenantRootPrincipalsRequest)(nil),    // 10: archivist.v1.GetTenantRootPrincipalsRequest
	(*GetAdminTenantInfoRequest)(nil),         // 11: archivist.v1.GetAdminTenantInfoRequest
	(*GetPublicTenantInfoRequest)(nil),        // 12: archivist.v1.GetPublicTenantInfoRequest
	(*GetPublicTenantInfoResponse)(nil),       // 13: archivist.v1.GetPublicTenantInfoResponse
	(*GetTenantRootPrincipalsResponse)(nil),   // 14: archivist.v1.GetTenantRootPrincipalsResponse
	(*ListTenantsRequest)(nil),                // 15: archivist.v1.ListTenantsRequest
	(*ListTenantsResponse)(nil),               // 16: archivist.v1.ListTenantsResponse
	(*UpdateTenantRootPrincipalsRequest)(nil), // 17: archivist.v1.UpdateTenantRootPrincipalsRequest
	(*UpdateProofMechanismRequest)(nil),       // 18: archivist.v1.UpdateProofMechanismRequest
	(*UpdateProofMechanismResponse)(nil),      // 19: archivist.v1.UpdateProofMechanismResponse
	(*GetTenantLimitsRequest)(nil),            // 20: archivist.v1.GetTenantLimitsRequest
	(*GetLimitsForCurrentTenantRequest)(nil),  // 21: archivist.v1.GetLimitsForCurrentTenantRequest
	(*GetLimitsForCurrentTenantResponse)(nil), // 22: archivist.v1.GetLimitsForCurrentTenantResponse
	(*TenantLimitsResponse)(nil),              // 23: archivist.v1.TenantLimitsResponse
	(*TopicFromPubKeyRequest)(nil),            // 24: archivist.v1.TopicFromPubKeyRequest
	(*TopicFromPubKeyResponse)(nil),           // 25: archivist.v1.TopicFromPubKeyResponse
	(*AdminTenantResponse)(nil),               // 26: archivist.v1.AdminTenantResponse
	(*UpdatableTenantPayload)(nil),            // 27: archivist.v1.UpdatableTenantPayload
	(*UpdateTenantRequest)(nil),               // 28: archivist.v1.UpdateTenantRequest
	(*UpdateTenantConfigurationRequest)(nil),  // 29: archivist.v1.UpdateTenantConfigurationRequest
	nil,                                       // 30: archivist.v1.TenantResponse.LimitsEntry
	nil,                                       // 31: archivist.v1.TenantResponse.QuorumNetworksEntry
	nil,                                       // 32: archivist.v1.GetLimitsForCurrentTenantResponse.LimitsEntry
	nil,                                       // 33: archivist.v1.TenantLimitsResponse.LimitsEntry
	(*assets.Principal)(nil),                  // 34: archivist.v2.Principal
	(assets.StorageIntegrity)(0),              // 35: archivist.v2.StorageIntegrity
	(assets.ProofMechanism)(0),                // 36: archivist.v2.ProofMechanism
	(*fieldmaskpb.FieldMask)(nil),             // 37: google.protobuf.FieldMask
	(*quorumnetwork.QuorumNetwork)(nil),       // 38: archivist.v1.QuorumNetwork
}
var file_tenancies_v1_tenancies_messages_proto_depIdxs = []int32{
	0,  // 0: archivist.v1.TenantIDResponse.tier:type_name -> archivist.v1.Tier
	34, // 1: archivist.v1.TenantResponse.root_principal:type_name -> archivist.v2.Principal
	34, // 2: archivist.v1.TenantResponse.root_principals:type_name -> archivist.v2.Principal
	30, // 3: archivist.v1.TenantResponse.limits:type_name -> archivist.v1.TenantResponse.LimitsEntry
	35, // 4: archivist.v1.TenantResponse.storage_integrity:type_name -> archivist.v2.StorageIntegrity
	36, // 5: archivist.v1.TenantResponse.proof_mechanism:type_name -> archivist.v2.ProofMechanism
	0,  // 6: archivist.v1.TenantResponse.tier:type_name -> archivist.v1.Tier
	31, // 7: archivist.v1.TenantResponse.quorum_networks:type_name -> archivist.v1.TenantResponse.QuorumNetworksEntry
	6,  // 8: archivist.v1.TenantResponse.enterprise_sso_config:type_name -> archivist.v1.EnterpriseSSOConfig
	34, // 9: archivist.v1.GetTenantRootPrincipalsResponse.root_principals:type_name -> archivist.v2.Principal
	36, // 10: archivist.v1.ListTenantsRequest.proof_mechanism:type_name -> archivist.v2.ProofMechanism
	7,  // 11: archivist.v1.ListTenantsResponse.tenants:type_name -> archivist.v1.TenantResponse
	34, // 12: archivist.v1.UpdateTenantRootPrincipalsRequest.root_principals:type_name -> archivist.v2.Principal
	36, // 13: archivist.v1.UpdateProofMechanismRequest.proof_mechanism:type_name -> archivist.v2.ProofMechanism
	32, // 14: archivist.v1.GetLimitsForCurrentTenantResponse.limits:type_name -> archivist.v1.GetLimitsForCurrentTenantResponse.LimitsEntry
	33, // 15: archivist.v1.TenantLimitsResponse.limits:type_name -> archivist.v1.TenantLimitsResponse.LimitsEntry
	6,  // 16: archivist.v1.AdminTenantResponse.enterprise_sso_config:type_name -> archivist.v1.EnterpriseSSOConfig
	6,  // 17: archivist.v1.UpdatableTenantPayload.enterprise_sso_config:type_name -> archivist.v1.EnterpriseSSOConfig
	27, // 18: archivist.v1.UpdateTenantRequest.tenant:type_name -> archivist.v1.UpdatableTenantPayload
	37, // 19: archivist.v1.UpdateTenantRequest.mask:type_name -> google.protobuf.FieldMask
	7,  // 20: archivist.v1.UpdateTenantConfigurationRequest.configuration:type_name -> archivist.v1.TenantResponse
	37, // 21: archivist.v1.UpdateTenantConfigurationRequest.mask:type_name -> google.protobuf.FieldMask
	38, // 22: archivist.v1.TenantResponse.QuorumNetworksEntry.value:type_name -> archivist.v1.QuorumNetwork
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_tenancies_v1_tenancies_messages_proto_init() }
func file_tenancies_v1_tenancies_messages_proto_init() {
	if File_tenancies_v1_tenancies_messages_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tenancies_v1_tenancies_messages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTenantIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tenancies_v1_tenancies_messages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TenantIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tenancies_v1_tenancies_messages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrentTenantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tenancies_v1_tenancies_messages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTenantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tenancies_v1_tenancies_messages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTenantFromWalletAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tenancies_v1_tenancies_messages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterpriseSSOConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tenancies_v1_tenancies_messages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TenantResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tenancies_v1_tenancies_messages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetLastAnchorTimeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tenancies_v1_tenancies_messages_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAnchorIntervalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tenancies_v1_tenancies_messages_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTenantRootPrincipalsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tenancies_v1_tenancies_messages_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAdminTenantInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tenancies_v1_tenancies_messages_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPublicTenantInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tenancies_v1_tenancies_messages_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPublicTenantInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tenancies_v1_tenancies_messages_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTenantRootPrincipalsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tenancies_v1_tenancies_messages_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTenantsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tenancies_v1_tenancies_messages_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTenantsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tenancies_v1_tenancies_messages_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTenantRootPrincipalsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tenancies_v1_tenancies_messages_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProofMechanismRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tenancies_v1_tenancies_messages_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProofMechanismResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tenancies_v1_tenancies_messages_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTenantLimitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tenancies_v1_tenancies_messages_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLimitsForCurrentTenantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tenancies_v1_tenancies_messages_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLimitsForCurrentTenantResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tenancies_v1_tenancies_messages_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TenantLimitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tenancies_v1_tenancies_messages_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopicFromPubKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tenancies_v1_tenancies_messages_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopicFromPubKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tenancies_v1_tenancies_messages_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminTenantResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tenancies_v1_tenancies_messages_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatableTenantPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tenancies_v1_tenancies_messages_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTenantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tenancies_v1_tenancies_messages_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTenantConfigurationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tenancies_v1_tenancies_messages_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tenancies_v1_tenancies_messages_proto_goTypes,
		DependencyIndexes: file_tenancies_v1_tenancies_messages_proto_depIdxs,
		EnumInfos:         file_tenancies_v1_tenancies_messages_proto_enumTypes,
		MessageInfos:      file_tenancies_v1_tenancies_messages_proto_msgTypes,
	}.Build()
	File_tenancies_v1_tenancies_messages_proto = out.File
	file_tenancies_v1_tenancies_messages_proto_rawDesc = nil
	file_tenancies_v1_tenancies_messages_proto_goTypes = nil
	file_tenancies_v1_tenancies_messages_proto_depIdxs = nil
}
