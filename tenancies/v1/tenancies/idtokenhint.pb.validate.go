// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: tenancies/v1/tenancies/idtokenhint.proto

package tenancies

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on InviteTokenHintRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InviteTokenHintRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InviteTokenHintRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InviteTokenHintRequestMultiError, or nil if none found.
func (m *InviteTokenHintRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InviteTokenHintRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetIdentity()) > 1024 {
		err := InviteTokenHintRequestValidationError{
			field:  "Identity",
			reason: "value length must be at most 1024 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTenantId()) > 1024 {
		err := InviteTokenHintRequestValidationError{
			field:  "TenantId",
			reason: "value length must be at most 1024 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetEmail()) > 1024 {
		err := InviteTokenHintRequestValidationError{
			field:  "Email",
			reason: "value length must be at most 1024 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return InviteTokenHintRequestMultiError(errors)
	}

	return nil
}

// InviteTokenHintRequestMultiError is an error wrapping multiple validation
// errors returned by InviteTokenHintRequest.ValidateAll() if the designated
// constraints aren't met.
type InviteTokenHintRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InviteTokenHintRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InviteTokenHintRequestMultiError) AllErrors() []error { return m }

// InviteTokenHintRequestValidationError is the validation error returned by
// InviteTokenHintRequest.Validate if the designated constraints aren't met.
type InviteTokenHintRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InviteTokenHintRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InviteTokenHintRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InviteTokenHintRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InviteTokenHintRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InviteTokenHintRequestValidationError) ErrorName() string {
	return "InviteTokenHintRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InviteTokenHintRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInviteTokenHintRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InviteTokenHintRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InviteTokenHintRequestValidationError{}

// Validate checks the field values on InviteTokenHintResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InviteTokenHintResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InviteTokenHintResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InviteTokenHintResponseMultiError, or nil if none found.
func (m *InviteTokenHintResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InviteTokenHintResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if all {
		switch v := interface{}(m.GetExpiryTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InviteTokenHintResponseValidationError{
					field:  "ExpiryTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InviteTokenHintResponseValidationError{
					field:  "ExpiryTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiryTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InviteTokenHintResponseValidationError{
				field:  "ExpiryTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InviteTokenHintResponseMultiError(errors)
	}

	return nil
}

// InviteTokenHintResponseMultiError is an error wrapping multiple validation
// errors returned by InviteTokenHintResponse.ValidateAll() if the designated
// constraints aren't met.
type InviteTokenHintResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InviteTokenHintResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InviteTokenHintResponseMultiError) AllErrors() []error { return m }

// InviteTokenHintResponseValidationError is the validation error returned by
// InviteTokenHintResponse.Validate if the designated constraints aren't met.
type InviteTokenHintResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InviteTokenHintResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InviteTokenHintResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InviteTokenHintResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InviteTokenHintResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InviteTokenHintResponseValidationError) ErrorName() string {
	return "InviteTokenHintResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InviteTokenHintResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInviteTokenHintResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InviteTokenHintResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InviteTokenHintResponseValidationError{}

// Validate checks the field values on UserTenantIDTokenHintRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserTenantIDTokenHintRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserTenantIDTokenHintRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserTenantIDTokenHintRequestMultiError, or nil if none found.
func (m *UserTenantIDTokenHintRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserTenantIDTokenHintRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetTenantId()) > 1024 {
		err := UserTenantIDTokenHintRequestValidationError{
			field:  "TenantId",
			reason: "value length must be at most 1024 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UserTenantIDTokenHintRequestMultiError(errors)
	}

	return nil
}

// UserTenantIDTokenHintRequestMultiError is an error wrapping multiple
// validation errors returned by UserTenantIDTokenHintRequest.ValidateAll() if
// the designated constraints aren't met.
type UserTenantIDTokenHintRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserTenantIDTokenHintRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserTenantIDTokenHintRequestMultiError) AllErrors() []error { return m }

// UserTenantIDTokenHintRequestValidationError is the validation error returned
// by UserTenantIDTokenHintRequest.Validate if the designated constraints
// aren't met.
type UserTenantIDTokenHintRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserTenantIDTokenHintRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserTenantIDTokenHintRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserTenantIDTokenHintRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserTenantIDTokenHintRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserTenantIDTokenHintRequestValidationError) ErrorName() string {
	return "UserTenantIDTokenHintRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserTenantIDTokenHintRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserTenantIDTokenHintRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserTenantIDTokenHintRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserTenantIDTokenHintRequestValidationError{}

// Validate checks the field values on UserTenantIDTokenHintResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserTenantIDTokenHintResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserTenantIDTokenHintResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UserTenantIDTokenHintResponseMultiError, or nil if none found.
func (m *UserTenantIDTokenHintResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserTenantIDTokenHintResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return UserTenantIDTokenHintResponseMultiError(errors)
	}

	return nil
}

// UserTenantIDTokenHintResponseMultiError is an error wrapping multiple
// validation errors returned by UserTenantIDTokenHintResponse.ValidateAll()
// if the designated constraints aren't met.
type UserTenantIDTokenHintResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserTenantIDTokenHintResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserTenantIDTokenHintResponseMultiError) AllErrors() []error { return m }

// UserTenantIDTokenHintResponseValidationError is the validation error
// returned by UserTenantIDTokenHintResponse.Validate if the designated
// constraints aren't met.
type UserTenantIDTokenHintResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserTenantIDTokenHintResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserTenantIDTokenHintResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserTenantIDTokenHintResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserTenantIDTokenHintResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserTenantIDTokenHintResponseValidationError) ErrorName() string {
	return "UserTenantIDTokenHintResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserTenantIDTokenHintResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserTenantIDTokenHintResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserTenantIDTokenHintResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserTenantIDTokenHintResponseValidationError{}
