syntax = "proto3";
package archivist.v1;
option go_package="github.com/rkvst/go-rkvstcommon-api-gen/tenancies/v1/tenancies;tenancies";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
        title: "UserManagement API"
        description: "Simple API for User Management"
        version: "1.0"
        contact: {
            name: "RKVST"
            url: "https://www.rkvst.com"
        }
    };
    base_path: "/_api"
    schemes: HTTPS;
    consumes: "application/json";
    produces: "application/json";
    tags: [
     {
       name: "Users",
       description: "Manage users in your RKVST tenancy"
     },
     {
       name: "Tenancies",
       description: "Manage your RKVST tenancy"
     },
     {
       name: "Unsupported",
       description: "Internal APIs that are unstable and should not be used in a production setting."
     }
   ];
};

message ListUserTenantsRequest {}

// UserTenantResponse represent a specific tenant's information for a user
message UserTenantResponse{
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            description:
            'Tenant information for a user.'
        }
        example: "{"
            "    \"identity\": \"tenant/01038663-c357-470d-912a-3abc9528dd21\","
            "    \"display_name\": \"Bobs Tenancy\""
            "}"
    };

    string identity = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "tenant identity in the form `tenancies/{UUID}`"
            read_only: true
        }
    ];

    string display_name = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "display name of the tenancy.`"
            read_only: true
        }
    ];

}

message ListUserTenantsResponse {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
        json_schema: {
            description:
            'List of tenancies the user belongs to (or the next page in a continuing '
            ' list request)'
        }
        example: "{"
            "  \"tenants\": ["
            "      {"
            "          \"identity\": \"tenant/01038663-c357-470d-912a-3abc9528dd21\","
            "          \"display_name\": \"Bobs Tenancy\""
            "      },"
            "      {"
            "          \"identity\": \"tenant/12149552-f258-430d-922b-4bcd8413ee30\","
            "          \"display_name\": \"Alices Tenancy\""
            "      }"
            "  ],"
            "  \"page_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6InN0dW50aWR\""
            "}"
    };

    repeated UserTenantResponse tenants = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "tenants in the form `tenant/{UUID}`"
            read_only: true
        }
    ];

    // Token to retrieve the next page of results or empty if there are none.
    string next_page_token = 2;
}

service Users {
    /*
     * lists User Tenants.
     */
    rpc ListUserTenants(ListUserTenantsRequest) returns (ListUserTenantsResponse) {
        option (google.api.http) =  {
            get: "/archivist/v1/users/tenants"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "List User Tenants",
            description: "Returns a list of tenancies the user has access to."
            responses: {
                key: "400";
                value: {
                    description: "Returned when the request is badly formed."
                }
            }
            responses: {
                key: "401";
                value: {
                    description: "Returned when the user is not authenticated to the system."
                }
            }
            responses: {
                key: "403";
                value: {
                    description: "Returned when the user is not authorized to read the user."
                }
            }
            responses: {
                key: "404";
                value: {
                    description: "Returned when the identified user don't exist.";
                }
            }
            responses: {
                key: "500";
                value: {
                    description: "Returned when the underlying storage system returns an error.";
                }
            }
        };
    }
}

