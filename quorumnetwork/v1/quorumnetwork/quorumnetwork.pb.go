// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.3
// source: quorumnetwork/v1/quorumnetwork/quorumnetwork.proto

//
// Structured network for mapping tenant/asset to DLT.
//

package quorumnetwork

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Models the interface between creators and the blockchain. Used in an internal LRU for each
// creator service
type QuorumNetwork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URL that represents the basic ethrpc connection to the blockchain. Must always be specified
	// even if is_private is true.
	// XXX: validate as URL rather than min/max len.
	NodeAddress string `protobuf:"bytes,1,opt,name=node_address,json=nodeAddress,proto3" json:"node_address,omitempty"`
	// URL that represents the ethrpc connection to the blockchain private transaction manager.
	// This is used if is_private is true. It is a validation error if this is empty and
	// is_private is true.
	// XXX: validate as URL rather than min/max len.
	TesseraAddress string `protobuf:"bytes,2,opt,name=tessera_address,json=tesseraAddress,proto3" json:"tessera_address,omitempty"`
	// DLT tessera public key. Not currently used anywhere?
	TesseraKey string `protobuf:"bytes,3,opt,name=tessera_key,json=tesseraKey,proto3" json:"tessera_key,omitempty"`
	// Topic to send the event on the simple hash path.
	Topic string `protobuf:"bytes,4,opt,name=topic,proto3" json:"topic,omitempty"`
	// If true then the tessera private transactions are enabled.
	IsPrivate bool `protobuf:"varint,5,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
}

func (x *QuorumNetwork) Reset() {
	*x = QuorumNetwork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quorumnetwork_v1_quorumnetwork_quorumnetwork_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuorumNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuorumNetwork) ProtoMessage() {}

func (x *QuorumNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_quorumnetwork_v1_quorumnetwork_quorumnetwork_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuorumNetwork.ProtoReflect.Descriptor instead.
func (*QuorumNetwork) Descriptor() ([]byte, []int) {
	return file_quorumnetwork_v1_quorumnetwork_quorumnetwork_proto_rawDescGZIP(), []int{0}
}

func (x *QuorumNetwork) GetNodeAddress() string {
	if x != nil {
		return x.NodeAddress
	}
	return ""
}

func (x *QuorumNetwork) GetTesseraAddress() string {
	if x != nil {
		return x.TesseraAddress
	}
	return ""
}

func (x *QuorumNetwork) GetTesseraKey() string {
	if x != nil {
		return x.TesseraKey
	}
	return ""
}

func (x *QuorumNetwork) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *QuorumNetwork) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

var File_quorumnetwork_v1_quorumnetwork_quorumnetwork_proto protoreflect.FileDescriptor

var file_quorumnetwork_v1_quorumnetwork_quorumnetwork_proto_rawDesc = []byte{
	0x0a, 0x32, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f,
	0x76, 0x31, 0x2f, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2f, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x69, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf5, 0x03, 0x0a, 0x0d,
	0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x6f, 0x0a,
	0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x4c, 0x92, 0x41, 0x3f, 0x32, 0x37, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x3a, 0x2f, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x3a, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x20, 0x72, 0x65, 0x73,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x20, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x20, 0x6e, 0x6f, 0x64,
	0x65, 0x78, 0x80, 0x08, 0x80, 0x01, 0x01, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80,
	0x08, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xb0,
	0x01, 0x0a, 0x0f, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x86, 0x01, 0x92, 0x41, 0x79, 0x32, 0x71,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x3a, 0x2f, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x3a, 0x70, 0x6f,
	0x72, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x20, 0x72, 0x65,
	0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x20, 0x6e,
	0x6f, 0x64, 0x65, 0x20, 0x69, 0x66, 0x20, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x20, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x78, 0x80, 0x08, 0x80, 0x01, 0x01, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80,
	0x08, 0x52, 0x0e, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x42, 0x0a, 0x0b, 0x74, 0x65, 0x73, 0x73, 0x65, 0x72, 0x61, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x14, 0x32, 0x0c, 0x54, 0x65, 0x73,
	0x73, 0x65, 0x72, 0x61, 0x20, 0x6b, 0x65, 0x79, 0x2e, 0x78, 0x80, 0x08, 0x80, 0x01, 0x01, 0xfa,
	0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x08, 0x52, 0x0a, 0x74, 0x65, 0x73, 0x73, 0x65,
	0x72, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x1b, 0x32, 0x13, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x20, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x78, 0x80,
	0x08, 0x80, 0x01, 0x01, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x08, 0x52, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x3c, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x18,
	0x49, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x73, 0x73, 0x61, 0x65, 0x72, 0x61, 0x20,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x3f, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x42, 0x56, 0x5a, 0x54, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x72, 0x6b, 0x76, 0x73, 0x74, 0x2f, 0x67, 0x6f, 0x2d, 0x72, 0x6b, 0x76, 0x73, 0x74,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x65, 0x6e, 0x2f, 0x71,
	0x75, 0x6f, 0x72, 0x75, 0x6d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x76, 0x31, 0x2f,
	0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x3b, 0x71, 0x75,
	0x6f, 0x72, 0x75, 0x6d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_quorumnetwork_v1_quorumnetwork_quorumnetwork_proto_rawDescOnce sync.Once
	file_quorumnetwork_v1_quorumnetwork_quorumnetwork_proto_rawDescData = file_quorumnetwork_v1_quorumnetwork_quorumnetwork_proto_rawDesc
)

func file_quorumnetwork_v1_quorumnetwork_quorumnetwork_proto_rawDescGZIP() []byte {
	file_quorumnetwork_v1_quorumnetwork_quorumnetwork_proto_rawDescOnce.Do(func() {
		file_quorumnetwork_v1_quorumnetwork_quorumnetwork_proto_rawDescData = protoimpl.X.CompressGZIP(file_quorumnetwork_v1_quorumnetwork_quorumnetwork_proto_rawDescData)
	})
	return file_quorumnetwork_v1_quorumnetwork_quorumnetwork_proto_rawDescData
}

var file_quorumnetwork_v1_quorumnetwork_quorumnetwork_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_quorumnetwork_v1_quorumnetwork_quorumnetwork_proto_goTypes = []interface{}{
	(*QuorumNetwork)(nil), // 0: archivist.v1.QuorumNetwork
}
var file_quorumnetwork_v1_quorumnetwork_quorumnetwork_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_quorumnetwork_v1_quorumnetwork_quorumnetwork_proto_init() }
func file_quorumnetwork_v1_quorumnetwork_quorumnetwork_proto_init() {
	if File_quorumnetwork_v1_quorumnetwork_quorumnetwork_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_quorumnetwork_v1_quorumnetwork_quorumnetwork_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuorumNetwork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_quorumnetwork_v1_quorumnetwork_quorumnetwork_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_quorumnetwork_v1_quorumnetwork_quorumnetwork_proto_goTypes,
		DependencyIndexes: file_quorumnetwork_v1_quorumnetwork_quorumnetwork_proto_depIdxs,
		MessageInfos:      file_quorumnetwork_v1_quorumnetwork_quorumnetwork_proto_msgTypes,
	}.Build()
	File_quorumnetwork_v1_quorumnetwork_quorumnetwork_proto = out.File
	file_quorumnetwork_v1_quorumnetwork_quorumnetwork_proto_rawDesc = nil
	file_quorumnetwork_v1_quorumnetwork_quorumnetwork_proto_goTypes = nil
	file_quorumnetwork_v1_quorumnetwork_quorumnetwork_proto_depIdxs = nil
}
